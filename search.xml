<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL注入学习笔记</title>
      <link href="/2019/04/01/sql-zhu-ru-xue-xi-bi-ji/"/>
      <url>/2019/04/01/sql-zhu-ru-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.pixabay.com/photo/2016/09/12/11/22/road-1663543_1280.jpg" alt="mcc"></p><h1 id="SQL注入学习笔记"><a href="#SQL注入学习笔记" class="headerlink" title="SQL注入学习笔记"></a>SQL注入学习笔记</h1><blockquote><p> 一直以来都没怎么有时间学一下web安全方面的知识，今天算是正式开始吧。</p></blockquote><h3 id="一-sql注入判断"><a href="#一-sql注入判断" class="headerlink" title="一.sql注入判断"></a>一.sql注入判断</h3><h5 id="1-首先讲一下google黑语法吧"><a href="#1-首先讲一下google黑语法吧" class="headerlink" title="1.首先讲一下google黑语法吧"></a>1.首先讲一下google黑语法吧</h5><blockquote><p>inurl(allinurl):               搜索包含在url里面的关键词</p><p>intext(allintext):                搜索包含在正文里的关键词</p><p>intitle:                       搜索包含在title里的关键词</p><p>cache:                      搜索谷歌爬取的一些缓存</p><p>define:                      搜索关键词的定义</p><p>filetype:                     搜索指定格式的文件</p><p>info:                      查找站点的一些基本信息</p><p>site:                       指定域名</p><p>linkurl:                       搜索和关键词网站做过连接的网站</p><blockquote><p>注入里面常用的是inurl</p><p>经常是通过google搜索查找指定站点的注入点</p><h5 id="2-常见的ur编码"><a href="#2-常见的ur编码" class="headerlink" title="2.常见的ur编码"></a>2.常见的ur编码</h5><p>空格是%20，单引号是%27， 井号是%23，双引号是%22</p><h5 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h5></blockquote></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AXX项目总结</title>
      <link href="/2019/03/21/axx-xiang-mu-zong-jie/"/>
      <url>/2019/03/21/axx-xiang-mu-zong-jie/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/41.jpg?raw=true" alt="mcc"></p><h1 id="AXX项目总结"><a href="#AXX项目总结" class="headerlink" title="AXX项目总结"></a>AXX项目总结</h1><blockquote><p>好久更新博客里，今天写完项目，总结一下，当作备忘录，真的真的不想在写后台了，太折腾了:happy:，这次项目，总的来说还是挺充实的，采用了以前的框架，写起来还是很快的。进度也还不错，到今天一共五天，虽然说遇到了n多的坑，但总算是完成了，累。</p></blockquote><p><a href="https://github.com/mcc321/AXX" target="_blank" rel="noopener">AXX项目地址</a></p><h4 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h4><blockquote><p>这次项目整体的框架还是用的上一个项目的蓝图框架,认证方式采用的是JWT，同时继承了cookie认证，可以在不同场合使用。比如说微信小程序就比较适合用JWT认证。最近和队友一起在做小程序，感觉还是很好的，前端时间因为临时做这个项目，耽搁了不少时间，现在要赶一下进度了。</p></blockquote><h4 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h4><ul><li><p>解决sa_instance_state报错</p><pre class=" language-python"><code class="language-python">AttributeError<span class="token punctuation">:</span> <span class="token string">'Manage'</span> object has no attribute <span class="token string">'_sa_instance_state'</span></code></pre><p>这个错误发生在user/comment路由里面，想了很久，也问过学长，最后都没找到原因，但还是暴力调试解决了问题，代码如下。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#models.py部分代码</span><span class="token keyword">class</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'message'</span>    __table_args__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'mysql_charset'</span><span class="token punctuation">:</span> <span class="token string">'utf8'</span><span class="token punctuation">}</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    message_content <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Text<span class="token punctuation">,</span>nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    message_from_name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    message_data <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>DateTime<span class="token punctuation">,</span>default <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    message_user_id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer <span class="token punctuation">,</span> db<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'user.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self <span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'message_content'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>message_content <span class="token operator">=</span> kwargs<span class="token punctuation">[</span><span class="token string">'message_content'</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token string">'message_from_name'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>message_from_name <span class="token operator">=</span> kwargs<span class="token punctuation">[</span><span class="token string">'message_from_name'</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token string">'message_user_full'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>user <span class="token operator">=</span> kwargs<span class="token punctuation">[</span><span class="token string">'message_user_full'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">get_message</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        dic<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'message_content'</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>message_content <span class="token punctuation">,</span><span class="token string">'message_from_name'</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>message_from_name <span class="token punctuation">,</span><span class="token string">'message_data'</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>message_data<span class="token punctuation">}</span>        <span class="token keyword">return</span> dic    <span class="token keyword">def</span> <span class="token function">to_json</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'message_content'</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>message_content<span class="token punctuation">,</span><span class="token string">'message_from_name'</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>message_from_name<span class="token punctuation">}</span></code></pre></li></ul><pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true">#views.py_v1部分代码</span>  @main<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/course/comment"</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  @jwt_required<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">course_comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>id<span class="token operator">=</span>current_identity<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>      dic <span class="token operator">=</span> json_loads<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token string">'comment_body'</span> <span class="token keyword">in</span> dic <span class="token operator">and</span> <span class="token string">'comment_course_id'</span> <span class="token keyword">in</span> dic<span class="token punctuation">:</span>          course <span class="token operator">=</span> Course<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>id<span class="token operator">=</span>dic<span class="token punctuation">[</span><span class="token string">'comment_course_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>          c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>          t <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">for</span> i <span class="token keyword">in</span> course<span class="token punctuation">.</span>comment<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-comment_date'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              c<span class="token punctuation">.</span>update<span class="token punctuation">(</span>                  <span class="token punctuation">{</span>t<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'comment_user_name'</span><span class="token punctuation">:</span> i<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'comment_body'</span><span class="token punctuation">:</span> i<span class="token punctuation">.</span>comment_body<span class="token punctuation">,</span> <span class="token string">'comment_date'</span><span class="token punctuation">:</span> i<span class="token punctuation">.</span>comment_date<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>              t <span class="token operator">+=</span> <span class="token number">1</span>          <span class="token keyword">if</span> <span class="token string">'is_comment_on_user'</span> <span class="token keyword">in</span> dic<span class="token punctuation">:</span>              <span class="token keyword">if</span> bool<span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'is_comment_on_user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'comment_on_user_id'</span> <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                  user_tmp<span class="token operator">=</span>User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>id<span class="token operator">=</span>dic<span class="token punctuation">[</span><span class="token string">'comment_on_user_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>                  str1 <span class="token operator">=</span> user<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"评论了您在"</span><span class="token operator">+</span>course<span class="token punctuation">.</span>course_name<span class="token operator">+</span><span class="token string">"课程的评论"</span>                  mcc_print<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>  user_tmp<span class="token punctuation">.</span>message<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Message<span class="token punctuation">(</span>message_content<span class="token operator">=</span>str1<span class="token punctuation">,</span>message_from_name<span class="token operator">=</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span>message_user_full<span class="token operator">=</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>                  c_tmp<span class="token operator">=</span>Comment<span class="token punctuation">(</span><span class="token operator">**</span>dic<span class="token punctuation">)</span>                  user<span class="token punctuation">.</span>comment<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c_tmp<span class="token punctuation">)</span>                  c<span class="token punctuation">.</span>update<span class="token punctuation">(</span>                      <span class="token punctuation">{</span>t<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'comment_user_name'</span><span class="token punctuation">:</span> user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'comment_body'</span><span class="token punctuation">:</span> dic<span class="token punctuation">[</span><span class="token string">'comment_body'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                           <span class="token string">'comment_date'</span><span class="token punctuation">:</span> c_tmp<span class="token punctuation">.</span>comment_date<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                  db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user_tmp<span class="token punctuation">)</span>                  db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token keyword">else</span><span class="token punctuation">:</span>                  user<span class="token punctuation">.</span>comment<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Comment<span class="token punctuation">(</span><span class="token operator">**</span>dic<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              user<span class="token punctuation">.</span>comment<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Comment<span class="token punctuation">(</span><span class="token operator">**</span>dic<span class="token punctuation">)</span><span class="token punctuation">)</span>          db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>          db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'StatusCode'</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">'info'</span><span class="token punctuation">:</span> <span class="token string">'评论用户成功'</span><span class="token punctuation">,</span> <span class="token string">'comment_all'</span><span class="token punctuation">:</span> c<span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'StatusCode'</span><span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token string">'info'</span><span class="token punctuation">:</span><span class="token string">'请求未填写完整'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true">#views.py_v2部分代码</span>  @main<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/course/comment"</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  @jwt_required<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">course_comment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>id<span class="token operator">=</span>current_identity<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>      dic <span class="token operator">=</span> json_loads<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token string">'comment_body'</span> <span class="token keyword">in</span> dic <span class="token operator">and</span> <span class="token string">'comment_course_id'</span> <span class="token keyword">in</span> dic<span class="token punctuation">:</span>          course <span class="token operator">=</span> Course<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>id<span class="token operator">=</span>dic<span class="token punctuation">[</span><span class="token string">'comment_course_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>          c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>          t <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">for</span> i <span class="token keyword">in</span> course<span class="token punctuation">.</span>comment<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-comment_date'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              c<span class="token punctuation">.</span>update<span class="token punctuation">(</span>                  <span class="token punctuation">{</span>t<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'comment_user_name'</span><span class="token punctuation">:</span> i<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'comment_body'</span><span class="token punctuation">:</span> i<span class="token punctuation">.</span>comment_body<span class="token punctuation">,</span> <span class="token string">'comment_date'</span><span class="token punctuation">:</span> i<span class="token punctuation">.</span>comment_date<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>              t <span class="token operator">+=</span> <span class="token number">1</span>          <span class="token keyword">if</span> <span class="token string">'is_comment_on_user'</span> <span class="token keyword">in</span> dic<span class="token punctuation">:</span>              <span class="token keyword">if</span> bool<span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'is_comment_on_user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'comment_on_user_id'</span> <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                  user_tmp<span class="token operator">=</span>User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>id<span class="token operator">=</span>dic<span class="token punctuation">[</span><span class="token string">'comment_on_user_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>                  str1 <span class="token operator">=</span> user<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"评论了您在"</span><span class="token operator">+</span>course<span class="token punctuation">.</span>course_name<span class="token operator">+</span><span class="token string">"课程的评论"</span>                  mcc_print<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>                  message<span class="token operator">=</span>Message<span class="token punctuation">(</span><span class="token punctuation">)</span>                  message<span class="token punctuation">.</span>message_content<span class="token operator">=</span>str1                  message<span class="token punctuation">.</span>message_from_name<span class="token operator">=</span>user<span class="token punctuation">.</span>name                  message<span class="token punctuation">.</span>user<span class="token operator">=</span>user_tmp                  c_tmp<span class="token operator">=</span>Comment<span class="token punctuation">(</span><span class="token operator">**</span>dic<span class="token punctuation">)</span>                  user<span class="token punctuation">.</span>comment<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c_tmp<span class="token punctuation">)</span>                  c<span class="token punctuation">.</span>update<span class="token punctuation">(</span>                      <span class="token punctuation">{</span>t<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'comment_user_name'</span><span class="token punctuation">:</span> user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">'comment_body'</span><span class="token punctuation">:</span> dic<span class="token punctuation">[</span><span class="token string">'comment_body'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                           <span class="token string">'comment_date'</span><span class="token punctuation">:</span> c_tmp<span class="token punctuation">.</span>comment_date<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                  db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user_tmp<span class="token punctuation">)</span>                  db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token keyword">else</span><span class="token punctuation">:</span>                  user<span class="token punctuation">.</span>comment<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Comment<span class="token punctuation">(</span><span class="token operator">**</span>dic<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              user<span class="token punctuation">.</span>comment<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Comment<span class="token punctuation">(</span><span class="token operator">**</span>dic<span class="token punctuation">)</span><span class="token punctuation">)</span>          db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>          db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'StatusCode'</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">'info'</span><span class="token punctuation">:</span> <span class="token string">'评论用户成功'</span><span class="token punctuation">,</span> <span class="token string">'comment_all'</span><span class="token punctuation">:</span> c<span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'StatusCode'</span><span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token string">'info'</span><span class="token punctuation">:</span><span class="token string">'请求未填写完整'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>详细的原因也不是很清楚，但最后还是解决了</p></blockquote><ul><li>db.sesseion.commit()时报错</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#具体的报错信息因为忘记保存就不贴了，但遇到这中文题一定要检查数据库的数据要求与你提交的数据库的要求之间进行对比，比如说nullable=False的列就不能缺，否者会commit提交不了，已经数据的类型也要注意，前后端交互，通过表单传递的一般是string，因此检查前端传来的参数十分必要</span></code></pre><ul><li>db.sesseion.add()报错</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#当时报这个错真的有点崩，完全没遇到过，要说传参出错，那也是应该在commit那一步报错，但add这一步就报错，很奇怪，最后解决方法，在query.filter_by(search_information=kwargs['search_information'])后加上first(),虽然说知道这个用法，但是，哎，可能还是老了。</span><span class="token keyword">def</span> <span class="token function">db_user_push</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'name'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>name<span class="token operator">=</span>kwargs<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        user <span class="token operator">=</span> current_user<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> current_identity<span class="token punctuation">:</span>        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>id<span class="token operator">=</span>current_identity<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        user<span class="token operator">=</span>User<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'name'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>        user<span class="token punctuation">.</span>name<span class="token operator">=</span>kwargs<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token string">'password'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>        user<span class="token punctuation">.</span>password<span class="token operator">=</span>generate_password_hash<span class="token punctuation">(</span>kwargs<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'confirmed'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>        user<span class="token punctuation">.</span>confirmed <span class="token operator">=</span> bool<span class="token punctuation">(</span>kwargs<span class="token punctuation">[</span><span class="token string">'confirmed'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'email'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>        user<span class="token punctuation">.</span>email <span class="token operator">=</span> kwargs<span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token string">'icon'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>        user<span class="token punctuation">.</span>icon<span class="token operator">=</span>kwargs<span class="token punctuation">[</span><span class="token string">'icon'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token string">'search_information'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>        tmp<span class="token operator">=</span>Search_information<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>search_information<span class="token operator">=</span>kwargs<span class="token punctuation">[</span><span class="token string">'search_information'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> tmp<span class="token punctuation">:</span>            tmp<span class="token punctuation">.</span>search_time<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> tmp <span class="token operator">not</span> <span class="token keyword">in</span> user<span class="token punctuation">.</span>search_information<span class="token punctuation">:</span>                user<span class="token punctuation">.</span>search_information<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Search_information<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            user<span class="token punctuation">.</span>search_information<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Search_information<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'comment_body'</span> <span class="token keyword">in</span> kwargs <span class="token operator">and</span> <span class="token string">'comment_course_id'</span> <span class="token keyword">in</span> kwargs <span class="token operator">and</span> <span class="token string">'comment_on_user_id'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>        user<span class="token punctuation">.</span>comment<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Comment<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'message_content'</span> <span class="token keyword">in</span> kwargs <span class="token operator">and</span> <span class="token string">'message_from_user_name'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>        user<span class="token punctuation">.</span>message<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Message<span class="token punctuation">(</span>message_content<span class="token operator">=</span>kwargs<span class="token punctuation">[</span><span class="token string">'message_content'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>message_from_name<span class="token operator">=</span>kwargs<span class="token punctuation">[</span><span class="token string">'message_from_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'role'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>        user<span class="token punctuation">.</span>Role <span class="token operator">=</span> Role<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>role<span class="token operator">=</span>kwargs<span class="token punctuation">[</span><span class="token string">'role'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'course_name'</span> <span class="token keyword">in</span> kwargs <span class="token operator">and</span> <span class="token string">'course_name'</span> <span class="token keyword">in</span> kwargs <span class="token operator">and</span> <span class="token string">'course_score'</span> <span class="token keyword">in</span> kwargs <span class="token operator">and</span> <span class="token string">'course_target'</span> <span class="token keyword">in</span> kwargs \            <span class="token operator">and</span> <span class="token string">'course_address'</span> <span class="token keyword">in</span> kwargs <span class="token operator">and</span> <span class="token string">'course_class_num'</span> <span class="token keyword">in</span> kwargs <span class="token operator">and</span> <span class="token string">'course_time_start'</span> <span class="token keyword">in</span> kwargs \            <span class="token operator">and</span> <span class="token string">'course_time_end'</span> <span class="token keyword">in</span> kwargs <span class="token operator">and</span> <span class="token string">'course_attr'</span> <span class="token keyword">in</span> kwargs <span class="token operator">and</span> <span class="token string">'course_teacher_name'</span> <span class="token keyword">in</span> kwargs \            <span class="token operator">and</span> <span class="token string">'course_check_type'</span> <span class="token keyword">in</span> kwargs <span class="token operator">and</span> <span class="token string">'course_time_week'</span> <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>        user<span class="token punctuation">.</span>course<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Course<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> user</code></pre><h4 id="项目感受"><a href="#项目感受" class="headerlink" title="项目感受"></a>项目感受</h4><blockquote><p>这次的项目感受还是很深的，五天忙里偷闲的，感觉很充实，也决定了自己接下来的方向，很多时候就是这样，自己的抉择，选定了就踏踏实实的做，遇到的一切都不算什么，压力什么的谁都会有，全力迈过之后，会很是一次很好的回忆</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元宵节</title>
      <link href="/2019/02/18/yuan-xiao-jie/"/>
      <url>/2019/02/18/yuan-xiao-jie/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/39.jpg?raw=true" alt="mcc"></p><h1 id="元宵节，有点想家了"><a href="#元宵节，有点想家了" class="headerlink" title="元宵节，有点想家了"></a>元宵节，有点想家了</h1><p>呵，不知道什么时候，变得有点奇奇怪怪的，这个假期过的很充实，但觉得还是有许多的遗憾。在学校的时间，每天很忙碌，在家又特别闲，什么事都不相干。人也许总是这样吧，当觉得一个地方待的不够尽兴，便想着离开，即使是家。离开的前一天妈妈和奶奶都说了很多，想着也许我能多在家里待几天，但还是狠下心来，离开了，其实并不是后悔，自己的选择，自己把握，只是觉得挺别扭的，有点像《狗十三》中的女主的感觉，要是能有同时体验所有的选择，也许会好一点吧。其实想了很多，觉得不悔，无憾，就可以了，多付出，不管是关注还是关怀，不管是明着的还是无形的，总会有许多变化吧。不能陪伴，是遗憾。不愿问候，确实真正的迷失，元宵节，愿自己喜欢的人和喜欢自己的人都能快快乐乐的度过。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 感受 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby学习(二)</title>
      <link href="/2019/02/12/ruby-xue-xi-er/"/>
      <url>/2019/02/12/ruby-xue-xi-er/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/37.jpg?raw=true" alt="mcc"></p><h1 id="Ruby从入门到放弃"><a href="#Ruby从入门到放弃" class="headerlink" title="Ruby从入门到放弃"></a>Ruby从入门到放弃</h1><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><h5 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h5><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Hello</span>    <span class="token keyword">def</span> <span class="token function">initialize</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token variable">@name</span><span class="token operator">=</span>name    <span class="token keyword">end</span>    <span class="token keyword">def</span> hello_matz        p <span class="token string">"Hello , "</span> <span class="token operator">+</span> <span class="token variable">@name</span> <span class="token operator">+</span> <span class="token string">" ! "</span>    <span class="token keyword">end</span><span class="token keyword">end</span>hi<span class="token operator">=</span><span class="token constant">Hello</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">"mcc"</span><span class="token punctuation">)</span>hi<span class="token punctuation">.</span>hello_matz<span class="token comment" spellcheck="true"># 添加方法</span><span class="token keyword">class</span> <span class="token class-name">Array</span>    <span class="token keyword">def</span> <span class="token function">array_to_ten</span>        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_a    <span class="token keyword">end</span><span class="token keyword">end</span>a<span class="token operator">=</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">ten</span><span class="token operator">=</span>a<span class="token punctuation">.</span>array_to_tenp ten</code></pre><h5 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h5><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Name</span>    <span class="token keyword">def</span> name        <span class="token variable">@name</span>    <span class="token keyword">end</span>    <span class="token keyword">def</span> name<span class="token operator">=</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token variable">@name</span><span class="token operator">=</span>val    <span class="token keyword">end</span><span class="token keyword">end</span>h<span class="token operator">=</span><span class="token constant">Name</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">h<span class="token punctuation">.</span>name</span> <span class="token operator">=</span> <span class="token string">"ads"</span>p h<span class="token punctuation">.</span>name<span class="token comment" spellcheck="true">#下面的attr方法与上面的效果相同</span><span class="token keyword">class</span> <span class="token class-name">Name</span>    attr <span class="token symbol">:name</span><span class="token punctuation">,</span><span class="token keyword">true</span><span class="token keyword">end</span>e<span class="token operator">=</span><span class="token constant">Name</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">e<span class="token punctuation">.</span>name</span><span class="token operator">=</span><span class="token string">"mcc"</span>p e<span class="token punctuation">.</span>name<span class="token comment" spellcheck="true">#attr_reader=name方法attr_writer=name=方法</span><span class="token keyword">class</span> <span class="token class-name">Name</span>    attr_reader <span class="token symbol">:name</span><span class="token punctuation">,</span><span class="token symbol">:sex</span>    attr_writer <span class="token symbol">:name</span><span class="token punctuation">,</span><span class="token symbol">:sex</span><span class="token keyword">end</span>e<span class="token operator">=</span><span class="token constant">Name</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">e<span class="token punctuation">.</span>name</span><span class="token operator">=</span><span class="token string">"mcc"</span>e<span class="token punctuation">.</span>sex<span class="token operator">=</span><span class="token string">"man"</span>p e<span class="token punctuation">.</span>namep e<span class="token punctuation">.</span>sex</code></pre><h5 id="类变量-类似c-静态变量"><a href="#类变量-类似c-静态变量" class="headerlink" title="类变量(类似c++静态变量)"></a>类变量(类似c++静态变量)</h5><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Repeat</span>    <span class="token variable">@@total</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">initialize</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>times<span class="token punctuation">)</span>        <span class="token variable">@string</span><span class="token operator">=</span>string        <span class="token variable">@times</span><span class="token operator">=</span>times    <span class="token keyword">end</span>    <span class="token keyword">def</span> repeat        <span class="token variable">@@total</span><span class="token operator">+</span><span class="token operator">=</span><span class="token variable">@times</span>        <span class="token keyword">return</span> <span class="token variable">@string</span><span class="token operator">*</span><span class="token variable">@times</span>    <span class="token keyword">end</span>    <span class="token keyword">def</span> total        <span class="token string">"Total tiems , so far: "</span> <span class="token operator">+</span> <span class="token variable">@@total</span><span class="token punctuation">.</span>to_s    <span class="token keyword">end</span><span class="token keyword">end</span>data<span class="token operator">=</span><span class="token constant">Repeat</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">"hello "</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>data1<span class="token operator">=</span><span class="token constant">Repeat</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">"ruby "</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>p data<span class="token punctuation">.</span>repeatp data<span class="token punctuation">.</span>totalp data1<span class="token punctuation">.</span>repeatp data1<span class="token punctuation">.</span>total</code></pre><h5 id="单体-单实例类"><a href="#单体-单实例类" class="headerlink" title="单体(单实例类)"></a>单体(单实例类)</h5><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Area</span>    <span class="token keyword">class</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token keyword">self</span>        <span class="token keyword">def</span> <span class="token function">rect</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span>width<span class="token punctuation">,</span>uints<span class="token operator">=</span><span class="token string">"inches"</span><span class="token punctuation">)</span>            area<span class="token operator">=</span>length<span class="token operator">*</span>width            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The area fo this rectangle is %.2f %s ."</span><span class="token punctuation">,</span>area<span class="token punctuation">,</span>uints<span class="token punctuation">)</span>            <span class="token function">sprintf</span><span class="token punctuation">(</span>"<span class="token string">%.2f",area)        end    endendp Area.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#单体类另一种方法</span><span class="token keyword">class</span> <span class="token class-name">Singleitem</span><span class="token keyword">end</span>s<span class="token operator">=</span><span class="token constant">Singleitem</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">def</span> s<span class="token punctuation">.</span>help    p <span class="token string">"hello , welcome "</span><span class="token keyword">end</span>s<span class="token punctuation">.</span>helpe<span class="token operator">=</span><span class="token constant">Singleitem</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">def</span> e<span class="token punctuation">.</span>p    p <span class="token string">"mcc"</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">#下面的调用会报错</span>p e<span class="token punctuation">.</span>helpp s<span class="token punctuation">.</span>p</code></pre><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Name</span>    attr_reader <span class="token symbol">:given_name</span><span class="token punctuation">,</span><span class="token symbol">:family_name</span>    attr_writer <span class="token symbol">:given_name</span><span class="token punctuation">,</span><span class="token symbol">:family_name</span><span class="token keyword">end</span><span class="token keyword">class</span> <span class="token class-name">Address</span><span class="token operator">&lt;</span><span class="token constant">Name</span>    attr_reader <span class="token symbol">:street</span><span class="token punctuation">,</span><span class="token symbol">:city</span>    attr_writer <span class="token symbol">:street</span><span class="token punctuation">,</span><span class="token symbol">:city</span><span class="token keyword">end</span>a<span class="token operator">=</span><span class="token constant">Address</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">p</span> a<span class="token punctuation">.</span>respond_to<span class="token operator">?</span><span class="token punctuation">(</span><span class="token symbol">:family_name</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span>family_name<span class="token operator">=</span><span class="token string">"mcc"</span>p a<span class="token punctuation">.</span>family_name<span class="token comment" spellcheck="true">#结果</span><span class="token keyword">true</span><span class="token string">"mcc"</span><span class="token comment" spellcheck="true">#如果类不在一个文件里则需要require相应的文件名</span><span class="token comment" spellcheck="true">#name.rb</span><span class="token keyword">class</span> <span class="token class-name">Name</span>    attr_reader <span class="token symbol">:given_name</span><span class="token punctuation">,</span><span class="token symbol">:family_name</span>    attr_writer <span class="token symbol">:given_name</span><span class="token punctuation">,</span><span class="token symbol">:family_name</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">#address.rb文件</span><span class="token keyword">require</span> <span class="token string">"name"</span><span class="token keyword">class</span> <span class="token class-name">Address</span><span class="token operator">&lt;</span><span class="token constant">Name</span>    attr_reader <span class="token symbol">:street</span><span class="token punctuation">,</span><span class="token symbol">:city</span>    attr_writer <span class="token symbol">:street</span><span class="token punctuation">,</span><span class="token symbol">:city</span><span class="token keyword">end</span>a<span class="token operator">=</span><span class="token constant">Address</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">p</span> a<span class="token punctuation">.</span>respond_to<span class="token operator">?</span><span class="token punctuation">(</span><span class="token symbol">:family_name</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span>family_name<span class="token operator">=</span><span class="token string">"mcc"</span>p a<span class="token punctuation">.</span>family_name</code></pre><h5 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h5><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token constant">Dice</span>    <span class="token keyword">def</span> roll        r_1<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>        r_2<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>        r1<span class="token operator">=</span>r_1<span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span>r_1<span class="token punctuation">:</span><span class="token number">1</span>        r2<span class="token operator">=</span>r_2<span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span>r_2<span class="token punctuation">:</span><span class="token number">6</span>        total<span class="token operator">=</span>r1<span class="token operator">+</span>r2        printf <span class="token string">"Your rolled %d and %d (%d).\n"</span><span class="token punctuation">,</span>r1<span class="token punctuation">,</span>r2<span class="token punctuation">,</span>total        total    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">class</span> <span class="token class-name">Game</span>    include <span class="token constant">Dice</span><span class="token keyword">end</span>g<span class="token operator">=</span><span class="token constant">Game</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">g<span class="token punctuation">.</span>roll</span><span class="token comment" spellcheck="true">#模块可以实现多继承类似go的interface</span></code></pre><h5 id="可见度"><a href="#可见度" class="headerlink" title="可见度"></a>可见度</h5><pre class=" language-ruby"><code class="language-ruby">public                <span class="token comment" spellcheck="true">#方法可以被定义它的类和子类访问，并可以被类和子类的实例对象调用；</span>protected            <span class="token comment" spellcheck="true">#方法可以被定义它的类和子类访问，不能被类和子类的实例对象调用，但可以被该类的实例对象(所有)访问；</span>private                <span class="token comment" spellcheck="true">#方法可以被定义它的类和子类访问，不能被类和子类的实例对象调用，且实例对象只能访问自己的private方法。</span><span class="token comment" spellcheck="true">#以上的陈述中，请注意“调用”和“访问”的区别。</span><span class="token keyword">class</span> <span class="token class-name">Game</span>    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token variable">@name</span><span class="token operator">=</span>name        p <span class="token variable">@name</span>    <span class="token keyword">end</span>    private    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>        p a<span class="token operator">+</span>b    <span class="token keyword">end</span>    <span class="token keyword">def</span> <span class="token function">div</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>        p a<span class="token operator">/</span>b    <span class="token keyword">end</span>    protected    <span class="token keyword">def</span> <span class="token function">add1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>        p a<span class="token operator">+</span>b    <span class="token keyword">end</span>    <span class="token keyword">def</span> <span class="token function">div1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>        p a<span class="token operator">/</span>b    <span class="token keyword">end</span>    public    <span class="token keyword">def</span> get        p <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>        p <span class="token function">div</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        p <span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>        p <span class="token function">div1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">class</span> <span class="token class-name">Sand</span><span class="token operator">&lt;</span><span class="token constant">Game</span>    <span class="token keyword">def</span> get        <span class="token comment" spellcheck="true">#报错</span>        <span class="token comment" spellcheck="true"># p add(1,2)</span>        <span class="token comment" spellcheck="true"># p div(2,1)</span>        p <span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>        p <span class="token function">div1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span>g<span class="token operator">=</span><span class="token constant">Game</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">g<span class="token punctuation">.</span>name</span><span class="token punctuation">(</span><span class="token string">"mcc"</span><span class="token punctuation">)</span>g<span class="token punctuation">.</span>get<span class="token comment" spellcheck="true">#Sand报错</span><span class="token comment" spellcheck="true">#Sand.get</span>s<span class="token operator">=</span><span class="token constant">Sand</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">s<span class="token punctuation">.</span>get</span><span class="token comment" spellcheck="true">#报错</span><span class="token comment" spellcheck="true"># g.add(1,2)</span><span class="token comment" spellcheck="true"># g.div(2,1)</span><span class="token comment" spellcheck="true"># g.add1(1,2)</span><span class="token comment" spellcheck="true"># g.div1(2,1)</span><span class="token comment" spellcheck="true"># Game.add(1,2)</span><span class="token comment" spellcheck="true"># Game.div(2,1)</span><span class="token comment" spellcheck="true"># Game.add1(1,2)</span><span class="token comment" spellcheck="true"># Game.div1(2,1)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python算法</title>
      <link href="/2019/01/29/python-suan-fa/"/>
      <url>/2019/01/29/python-suan-fa/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/35.jpg?raw=true" alt="mcc"></p><h1 id="python算法"><a href="#python算法" class="headerlink" title="python算法"></a>python算法</h1><blockquote><p>一直想学一下算法，但一直拖着，今天好好的学一下吧</p></blockquote><h4 id="1-python-assert断言"><a href="#1-python-assert断言" class="headerlink" title="1.python assert断言"></a>1.python assert断言</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">assert</span> 判断语句<span class="token punctuation">,</span><span class="token string">"提示"</span>这句话相当于<span class="token keyword">if</span> <span class="token operator">not</span> 判断语句：    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"提示"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby学习(一)</title>
      <link href="/2019/01/26/ruby-xue-xi-yi/"/>
      <url>/2019/01/26/ruby-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<hr><p><img src="https://github.com/mcc321/mcc/blob/master/img/32.jpg?raw=true" alt="mcc"></p><h1 id="Ruby从入门到放弃"><a href="#Ruby从入门到放弃" class="headerlink" title="Ruby从入门到放弃"></a>Ruby从入门到放弃</h1><h2 id="ruby语法-关键字"><a href="#ruby语法-关键字" class="headerlink" title="ruby语法,关键字"></a>ruby语法,关键字</h2><pre class=" language-ruby"><code class="language-ruby"> <span class="token comment" spellcheck="true"># @Author: mcc </span> <span class="token comment" spellcheck="true"># @Date: 2019-01-26 08:30:00 </span> <span class="token comment" spellcheck="true"># @Last Modified by: mcc </span> <span class="token comment" spellcheck="true"># @Last Modified time: 2019-01-26 08:30:00 </span><span class="token keyword">BEGIN</span><span class="token punctuation">{</span>puts <span class="token string">"hello mcc!"</span><span class="token punctuation">}</span><span class="token keyword">END</span><span class="token punctuation">{</span>puts <span class="token string">"goodbye!"</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Hello</span>    <span class="token keyword">def</span> howdy        greeting<span class="token operator">=</span><span class="token string">"hello,Matz!"</span>        puts greeting    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">class</span> <span class="token class-name">Goodbye</span><span class="token operator">&lt;</span><span class="token constant">Hello</span>    <span class="token keyword">def</span> solong        farewell<span class="token operator">=</span><span class="token string">"Goodbye , Matz!"</span>        puts farewell    <span class="token keyword">end</span><span class="token keyword">end</span>friendly<span class="token operator">=</span><span class="token constant">Goodbye</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">friendly<span class="token punctuation">.</span>howdy</span>friendly<span class="token punctuation">.</span>solongeval <span class="token string">"puts 'this is a test instruction'"</span><span class="token comment" spellcheck="true"># this is a comment</span>x<span class="token operator">=</span><span class="token number">10</span>puts x<span class="token punctuation">.</span>kind_of<span class="token operator">?</span><span class="token builtin">Integer</span>puts x<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">puts</span> x<span class="token punctuation">.</span>to_fthoreau<span class="token operator">=</span>"<span class="token constant">If</span> a man doesn't keep pace with his companions<span class="token punctuation">,</span>perhaps it is beacause he hears a different drumer"puts thoreau<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>puts thoreau<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">21</span><span class="token punctuation">]</span>puts thoreau<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>thoreau<span class="token punctuation">.</span>each_byte <span class="token keyword">do</span> <span class="token operator">|</span>c<span class="token operator">|</span>    print c<span class="token punctuation">.</span>to_i<span class="token punctuation">,</span><span class="token string">"/"</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">#全局变量</span><span class="token variable">$name</span><span class="token operator">=</span><span class="token string">"mcc"</span> <span class="token comment" spellcheck="true">#局部变量</span>name<span class="token operator">=</span><span class="token string">"mcc"</span><span class="token comment" spellcheck="true">#常量</span><span class="token constant">NAME</span><span class="token operator">=</span><span class="token string">"mcc"</span><span class="token comment" spellcheck="true">#类实例变量</span><span class="token variable">@name</span><span class="token operator">=</span><span class="token string">"mcc"</span><span class="token comment" spellcheck="true">#类变量</span><span class="token variable">@@name</span><span class="token operator">=</span><span class="token string">"mcc"</span>hamlet<span class="token operator">=</span><span class="token string">"The slings and arrows of outrageous forturn"</span>print hamlet<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token regex">/\w+/</span><span class="token punctuation">)</span>putsvalue<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">if</span> value<span class="token punctuation">.</span>zero<span class="token operator">?</span><span class="token keyword">then</span>    puts <span class="token string">"value is zero,Did you guess that one?"</span><span class="token keyword">end</span>practice <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Washington"</span><span class="token punctuation">,</span><span class="token string">"oregon"</span><span class="token punctuation">,</span><span class="token string">"California"</span><span class="token punctuation">]</span>puts practice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>practice2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"WA"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"Washington"</span><span class="token punctuation">,</span><span class="token string">"OR"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"oregon"</span><span class="token punctuation">,</span><span class="token string">"CA"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"California"</span><span class="token punctuation">}</span>puts practice2<span class="token punctuation">[</span><span class="token string">"OR"</span><span class="token punctuation">]</span><span class="token keyword">def</span> hello     puts <span class="token string">"hello Matz"</span><span class="token keyword">end</span>hello<span class="token comment" spellcheck="true">#undef hello</span><span class="token keyword">def</span> hello     puts <span class="token string">"hello mcc"</span><span class="token keyword">end</span>hello<span class="token comment" spellcheck="true">#含参</span><span class="token keyword">def</span> <span class="token function">repeat</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span>time<span class="token punctuation">)</span>    puts word<span class="token operator">*</span>time<span class="token keyword">end</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token constant">Matz</span>    <span class="token keyword">return</span> <span class="token string">"mcc"</span><span class="token keyword">end</span>a<span class="token operator">=</span><span class="token function">Matz</span><span class="token punctuation">(</span><span class="token punctuation">)</span>puts ax<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token comment" spellcheck="true"># puts x.eql?(y)</span><span class="token comment" spellcheck="true"># puts x.eql? y</span>x<span class="token operator">=</span><span class="token string">"this is a test string"</span>x<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>puts xx<span class="token punctuation">.</span>delete<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>puts x<span class="token keyword">class</span> <span class="token class-name">Name</span>    <span class="token keyword">def</span> <span class="token function">family_name</span><span class="token punctuation">(</span>family<span class="token punctuation">)</span>        <span class="token variable">@Family_name</span><span class="token operator">=</span>family    <span class="token keyword">end</span>    <span class="token keyword">def</span> <span class="token function">given_name</span><span class="token punctuation">(</span>given<span class="token punctuation">)</span>        <span class="token variable">@given_name</span><span class="token operator">=</span>given    <span class="token keyword">end</span><span class="token keyword">end</span>n<span class="token operator">=</span><span class="token constant">Name</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">puts</span> n<span class="token punctuation">.</span>family_name <span class="token string">"Matsumoto"</span>puts n<span class="token punctuation">.</span>given_name <span class="token string">"Yukihiro"</span><span class="token comment" spellcheck="true">#参数的默认值</span><span class="token keyword">def</span> <span class="token function">repeat2</span><span class="token punctuation">(</span>word<span class="token operator">=</span><span class="token string">"hello!"</span><span class="token punctuation">,</span>times<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    puts word<span class="token operator">*</span>times<span class="token keyword">end</span>puts repeat2 <span class="token string">"mcc\n"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token keyword">def</span> <span class="token function">num_args</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>    length<span class="token operator">=</span>args<span class="token punctuation">.</span>size    label<span class="token operator">=</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token string">"argument"</span><span class="token punctuation">:</span><span class="token string">"arguments"</span>    num<span class="token operator">=</span>length<span class="token punctuation">.</span>to_s<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>label<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token string">"{"</span><span class="token operator">+</span>args<span class="token punctuation">.</span>inspect<span class="token operator">+</span><span class="token string">"}"</span>    num<span class="token keyword">end</span>puts num_argsputs <span class="token function">num_args</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>puts <span class="token function">num_args</span><span class="token punctuation">(</span><span class="token string">"mcc"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">two_plus</span><span class="token punctuation">(</span>one<span class="token punctuation">,</span>two<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span>    length<span class="token operator">=</span>args<span class="token punctuation">.</span>size    label<span class="token operator">=</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token string">"argument"</span><span class="token punctuation">:</span><span class="token string">"arguments"</span>    num<span class="token operator">=</span>length<span class="token punctuation">.</span>to_s <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> label <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">"{"</span><span class="token operator">+</span>args<span class="token punctuation">.</span>inspect<span class="token operator">+</span><span class="token string">"}"</span>    num<span class="token keyword">end</span>puts two_plus <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>puts two_plus <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span>puts two_plus <span class="token number">12</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"asdfa"</span><span class="token keyword">def</span> greet    puts <span class="token string">"hi"</span><span class="token keyword">end</span><span class="token keyword">alias</span> hi greethiputs greet<span class="token punctuation">.</span>object_id<span class="token punctuation">,</span>hi<span class="token punctuation">.</span>object_idpractice<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span>practice<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>element<span class="token operator">|</span>    puts element<span class="token keyword">end</span>practice<span class="token punctuation">.</span><span class="token keyword">each</span><span class="token punctuation">{</span><span class="token operator">|</span>e<span class="token operator">|</span> puts e<span class="token punctuation">}</span><span class="token keyword">def</span> gimme    <span class="token keyword">if</span> block_given<span class="token operator">?</span>        <span class="token keyword">yield</span>    <span class="token keyword">else</span>        puts <span class="token string">"i'm a block_less"</span>    <span class="token keyword">end</span><span class="token keyword">end</span>gimme<span class="token punctuation">{</span>puts <span class="token string">"this is block test"</span><span class="token punctuation">}</span>gimmecount<span class="token operator">=</span><span class="token builtin">Proc</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>i<span class="token operator">|</span> print i <span class="token keyword">end</span><span class="token punctuation">;</span>puts<span class="token punctuation">}</span>your_proc<span class="token operator">=</span>lambda<span class="token punctuation">{</span>puts <span class="token string">"Larch : 'your range'"</span><span class="token punctuation">}</span>my_proc<span class="token operator">=</span>proc<span class="token punctuation">{</span>puts <span class="token string">"Morticial: 'who was at the door Lurch'"</span><span class="token punctuation">}</span>puts count<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>your_proc<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>my_proc<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">count<span class="token punctuation">.</span>call</span>your_proc<span class="token punctuation">.</span>callmy_proc<span class="token punctuation">.</span>callname<span class="token operator">=</span><span class="token string">"Matz"</span>puts name<span class="token punctuation">.</span>to_symputs <span class="token symbol">:Matz</span><span class="token punctuation">.</span>id2nameputs name<span class="token operator">==</span><span class="token symbol">:Matz</span><span class="token punctuation">.</span>id2namet<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">Symbol</span><span class="token punctuation">.</span>all_symbols <span class="token keyword">do</span>    print <span class="token string">"%-20.20s \t"</span><span class="token operator">%</span>i    <span class="token keyword">if</span> t<span class="token operator">==</span><span class="token number">4</span>        t<span class="token operator">=</span><span class="token number">0</span>        puts    <span class="token keyword">else</span>        t<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">end</span><span class="token keyword">end</span></code></pre><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><ul><li>类名必须首字母大写</li><li>常见的命名<ul><li>常量:首字母必须大写，一般全部大写</li><li>局部变量小写</li><li>全局变量加上<code>$</code>,比如说<code>$name=&quot;mcc&quot;</code></li><li>类变量加@@</li><li>类实例变量加@</li></ul></li></ul><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><ul><li>BEGIN，END定义其实和结束时执行的<strong><em>语句块</em></strong></li></ul><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">BEGIN</span><span class="token punctuation">{</span>puts <span class="token string">"hello ruby"</span><span class="token punctuation">}</span><span class="token keyword">END</span><span class="token punctuation">{</span>puts <span class="token string">"goodbye ruby"</span><span class="token punctuation">}</span></code></pre><ul><li><p>end,每个函数，if判断语句，class后都必须有end</p></li><li><p>eval ,执行语句块，比如说<code>eval {puts &quot;hello&quot;}</code></p></li><li><p>new，类的实例化<code>a=classname.new</code></p></li><li><p>类型装换</p><pre class=" language-ruby"><code class="language-ruby">to_i    to_c    to_r    to_fx<span class="token operator">=</span><span class="token number">10</span>x<span class="token punctuation">.</span>to_f        <span class="token comment" spellcheck="true">#to float</span>x<span class="token punctuation">.</span>to_c        <span class="token comment" spellcheck="true">#to char</span>x<span class="token punctuation">.</span>to_r        <span class="token comment" spellcheck="true">#to_rational(有理数)</span>x<span class="token punctuation">.</span>to_i        <span class="token comment" spellcheck="true">#to_integer</span>x<span class="token punctuation">.</span>to_sym    <span class="token comment" spellcheck="true">#to_symbol</span>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span>to_a        <span class="token comment" spellcheck="true">#to_array</span></code></pre></li><li><p>ARGV指的是终端中执行<code>ruby test.rb 参数</code>中的参数ARGV[0]指第一个参数</p></li><li><p>循环 </p><blockquote><p>这里需要先说明的是ruby中数值创建</p><p><code>[1..3]</code>代表的是[1,2,3]</p><p><code>[1...3]</code>代表的是[1,2]</p></blockquote><h5 id="1-for循环"><a href="#1-for循环" class="headerlink" title="1.for循环"></a>1.for循环</h5><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">for</span> i <span class="token keyword">in</span> array_name    <span class="token comment" spellcheck="true">#看到许多教程上说要在array_name后面加上do，但我是了一下，不加可以</span>    proc<span class="token keyword">end</span>    </code></pre><h5 id="2-while循环"><a href="#2-while循环" class="headerlink" title="2.while循环"></a>2.while循环</h5><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">while</span> conditional    code<span class="token keyword">end</span></code></pre><h5 id="3-until循环"><a href="#3-until循环" class="headerlink" title="3.until循环"></a>3.until循环</h5><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">until</span> conditional   code<span class="token keyword">end</span></code></pre></li><li><p>print ,puts,sprintf区别</p><p><code>`</code>ruby<br>print “hello “,”world”    print “hello “,”world”<br>输出：<br>hello world=&gt; nil</p></li></ul><p>  print “hello “,”world”<br>  输出：<br>  hello world=&gt; nil</p><p>  puts “hello “+”world”<br>  输出：<br>  hello world<br>  =&gt; nil</p><p>  puts “hello “,”world”<br>  输出：<br>  hello<br>  world<br>  =&gt; nil</p><p>  a=sprintf(“hello %-12.5s %-12.5s”%[“China”,”mcc”])<br>  其实感觉这句话很鸡肋赋值的话直接a=”hello %-12.5s %-12.5s”%[“China”,”mcc”]不就完了，也许是还没领会到这个方法的真谛吧</p><pre><code>* 符号`#{}`  ```ruby  算不上关键字但觉得有必要讲一下  mcc=&quot;zhang不大的先生&quot;  puts “hello #{mcc}”</code></pre><ul><li><p>yield</p><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">def</span> gimme    <span class="token keyword">if</span> block_given<span class="token operator">?</span>        <span class="token keyword">yield</span>    <span class="token keyword">else</span>        puts <span class="token string">"i'm a block_less"</span>    <span class="token keyword">end</span><span class="token keyword">end</span>gimme<span class="token punctuation">{</span>puts <span class="token string">"this is block test"</span><span class="token punctuation">}</span>gimme输出：this is block testi'm a block_less<span class="token keyword">yield</span>简单来说就是执行语句块</code></pre></li><li><p>each</p><p><code>`</code>ruby<br>[1..5].each do |e| </p><pre><code>puts e</code></pre><p>end<br>输出：<br>1..5</p></li></ul><p>  [1..5].each {|2| puts e}<br>  输出：<br>  1..5</p><pre><code>* alias  ```ruby  def m      puts &quot;m&quot;  end  alias mm m</code></pre><ul><li><p>操作符</p><pre class=" language-ruby"><code class="language-ruby"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>没有<span class="token operator">++</span>也没有<span class="token operator">--</span>操作符<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>alabel<span class="token operator">=</span>a<span class="token punctuation">.</span>size<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token string">"argument"</span><span class="token punctuation">:</span><span class="token string">"arguments"</span>  </code></pre></li></ul><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><ul><li>if elsif else end，这里和python有点不同，elsif不是elif</li></ul><pre class=" language-ruby"><code class="language-ruby"> <span class="token comment" spellcheck="true"># @Author: mcc </span> <span class="token comment" spellcheck="true"># @Date: 2019-01-26 14:29:07 </span> <span class="token comment" spellcheck="true"># @Last Modified by: mcc </span> <span class="token comment" spellcheck="true"># @Last Modified time: 2019-01-26 14:29:07 </span>print <span class="token string">"请输入用户名:"</span>username<span class="token operator">=</span>gets<span class="token punctuation">.</span>stripprint <span class="token string">"请输入用户名:"</span>passwd<span class="token operator">=</span>gets<span class="token punctuation">.</span>strip<span class="token keyword">if</span> username<span class="token operator">==</span><span class="token string">"root"</span> <span class="token keyword">and</span> passwd<span class="token operator">==</span><span class="token string">"root"</span>    puts <span class="token string">"hello admin"</span>    <span class="token keyword">elsif</span> username<span class="token operator">==</span><span class="token string">"mcc"</span> <span class="token keyword">and</span> passwd<span class="token operator">==</span><span class="token string">"mcc"</span>    puts <span class="token string">"hello mcc"</span> <span class="token keyword">else</span>    puts <span class="token string">"annoyance"</span>  <span class="token keyword">end</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>输出：请输入用户名<span class="token symbol">:mcc</span>请输入用户名<span class="token symbol">:mcc</span>hello mcc请输入用户名<span class="token symbol">:root</span>请输入用户名<span class="token symbol">:root</span>hello admin请输入用户名<span class="token punctuation">:</span><span class="token string">"=="</span>" <span class="token keyword">or</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span><span class="token comment" spellcheck="true">#</span>请输入用户名<span class="token punctuation">:</span><span class="token string">"=="</span>" <span class="token keyword">or</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span><span class="token comment" spellcheck="true">#</span>annoyance</code></pre><ul><li><p>case语句</p><p><code>`</code>ruby<br>lang=:fr<br>dog=case lang<br>when :en</p><pre><code>&quot;dog&quot;</code></pre><p>when :es </p><pre><code>&quot;perro&quot;</code></pre><p>when :fr </p><pre><code>&quot;chien&quot;</code></pre><p>when :de</p><pre><code>&quot;hund&quot;</code></pre><p>else</p><pre><code>&quot;dog&quot;</code></pre><p>end<br>print dog</p></li></ul><p>  scale=gets<br>  case scale<br>  when 0<br>      puts “lower”<br>  when [1..4]<br>      puts “medium low”<br>  when [5..9]<br>      puts “medium high”<br>  else<br>      puts “high”<br>  end<br>  [m..n]表示的是一个范围并非数组</p><pre><code>* begin end循环补充  ```ruby  temp=98.3  begin      puts &quot;Your temperary is &quot;+temp.to_s+&quot;Fahrenheit&quot;      puts &quot;I think you are okay&quot;      temp+=1.0  end while temp&lt;98.6  puts &quot;your temperary is &quot;+temp.to_s+&quot;Fahrenheit&quot;</code></pre><ul><li><p>break中断</p><pre class=" language-ruby"><code class="language-ruby">breeds<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Quar"</span><span class="token punctuation">,</span><span class="token string">"Arabian"</span><span class="token punctuation">,</span><span class="token string">"djfia"</span><span class="token punctuation">,</span><span class="token string">"adsfas"</span><span class="token punctuation">]</span>temp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">&lt;</span>breeds<span class="token punctuation">.</span>size    temp<span class="token operator">&lt;</span><span class="token operator">&lt;</span>breeds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>capitalize    <span class="token keyword">break</span> <span class="token keyword">if</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"Arabian"</span>    i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">end</span>puts temp<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>输出：<span class="token constant">Quar</span><span class="token constant">Arabian</span></code></pre></li><li><p>unless与until和if与while的用法相反，这里不详细说明了</p></li><li><p>loop相当于while 1</p></li><li><p>times方法</p><pre class=" language-ruby"><code class="language-ruby">比较<span class="token keyword">for</span>循环和times方法<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">10</span>    print i<span class="token punctuation">,</span><span class="token string">"  "</span><span class="token keyword">end</span><span class="token number">10</span><span class="token punctuation">.</span>times<span class="token punctuation">{</span><span class="token operator">|</span>i<span class="token operator">|</span> print i<span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">}</span><span class="token number">10</span><span class="token punctuation">.</span>times <span class="token keyword">do</span> <span class="token operator">|</span>i<span class="token operator">|</span>    puts i<span class="token keyword">end</span>结果：<span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">3</span>  <span class="token number">4</span>  <span class="token number">5</span>  <span class="token number">6</span>  <span class="token number">7</span>  <span class="token number">8</span>  <span class="token number">9</span>  <span class="token number">10</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">10</span><span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">3</span>  <span class="token number">4</span>  <span class="token number">5</span>  <span class="token number">6</span>  <span class="token number">7</span>  <span class="token number">8</span>  <span class="token number">9</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token number">10</span></code></pre></li><li><p>upto和downto方法</p><p><code>`</code>ruby<br>2.upto(12){|i| print i,”\t”}<br>12.downto(1){|i| print i,”\t”}</p></li></ul><p>  2.upto(12) do |i|<br>      puts i<br>  end</p><p>  12.downto(2) do |i|<br>      puts i<br>  end</p><p>  结果：<br>  2       3       4       5       6       7       8       9       10      11      12      =&gt; 2<br>  12      11      10      9       8       7       6       5       4       3       2       1       =&gt; 12</p><pre><code>* step变步长循环  ```ruby  1.step(9,2){|i| print i,&quot;\t&quot;}  1.step(9,2) do |i|      puts i  end  结果：  1       3       5       7       9       =&gt; 1</code></pre><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li><p>建立字符串</p><pre class=" language-ruby"><code class="language-ruby">title<span class="token operator">=</span><span class="token builtin">String</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token class-name">title<span class="token punctuation">.</span>empty</span>title<span class="token punctuation">.</span>size</code></pre></li><li><p>嵌入文档</p><pre class=" language-ruby"><code class="language-ruby">sonnet<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span>thisaosdfjiajeoijodaofpaoefadfasdfvadsfasdfasdfgfsegrstrhsefgfadgfafreagaeragregvraehtrnseraerfdthisputs sonnet这里需要解释一下，this是分割符，其间的所有字符赋值给sonnet</code></pre></li><li><p>连接字符</p><pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">&lt;</span>和<span class="token operator">+</span>可以连接字符<span class="token string">"hello"</span><span class="token operator">+</span><span class="token string">" world"</span><span class="token string">"hello"</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token string">" world"</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>输出：<span class="token operator">=</span><span class="token operator">></span> <span class="token string">"hello world"</span></code></pre></li><li><p>访问字符</p><pre class=" language-ruby"><code class="language-ruby">a<span class="token operator">=</span><span class="token string">"A horse ! a horse!my kingdom for a horse"</span>b<span class="token operator">=</span><span class="token string">"Act V ,Scan V"</span>c<span class="token operator">=</span><span class="token string">"King Richard III"</span>puts c<span class="token punctuation">[</span><span class="token string">"King"</span><span class="token punctuation">]</span>puts a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>puts a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>chrputs a<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#从18开始向后截取23个字符</span>puts a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">]</span>puts a<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>        <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>结果：<span class="token constant">King</span>rrmy kingdom <span class="token keyword">for</span> a horse<span class="token constant">A</span> hor<span class="token number">10</span>这里可以看出根据索引数字返回的直接是字符不是<span class="token constant">ASKII</span>编码，看到书上的是<span class="token constant">ASKII</span>编码还有就是index函返回的是首次出现的偏移位置（首个字母偏移是<span class="token number">0</span>）</code></pre></li><li><p>字符串比较</p><pre class=" language-ruby"><code class="language-ruby"><span class="token operator">==</span><span class="token punctuation">.</span>equal<span class="token operator">?</span>其实我觉得ruby中很多实现都有有多种方法，和go语言的方法有很大差别，不过个人来说更喜欢go的风格</code></pre></li><li><p>字符串操作</p><pre class=" language-ruby"><code class="language-ruby">a<span class="token operator">=</span><span class="token string">"hello "</span>puts a<span class="token operator">*</span><span class="token number">3</span>b<span class="token operator">=</span><span class="token string">"helo"</span>puts b<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">)</span>puts b<span class="token punctuation">.</span>insert <span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>结果：hello hello hellohellohelllo从结果中可以看出（）可不加，看了特别多函数都是这样，传递给函数的参数可不加（），仅需通过，分隔即可</code></pre></li><li><p>改变字符串</p><pre class=" language-ruby"><code class="language-ruby">line<span class="token operator">=</span><span class="token string">"A Porsche! a Porsche! my kingdom for a Porsche"</span>cite<span class="token operator">=</span><span class="token string">"Act v,Scene V"</span>speaker<span class="token operator">=</span><span class="token string">"King Richard, 2007"</span>speaker<span class="token punctuation">[</span><span class="token string">", 2007"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"III"</span>puts speakercite<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"IV"</span>p citeline<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Porsche 911 Turbo(涡轮)"</span>p linespeaker<span class="token operator">=</span><span class="token string">"King Richard, 2007"</span>speaker<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"the Third "</span>p speaker<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>结果：<span class="token constant">King</span> <span class="token constant">RichardIII</span><span class="token string">"Act v,Scene VIV"</span><span class="token string">"A Porsche! a Porsche! my kingdom for a Porsche 911 Turbo(\u6DA1\u8F6E)"</span><span class="token string">"King Richard,the Third 07"</span>这里p输出是不进行转码，按原样打印字符串</code></pre></li><li><p>delete</p><pre class=" language-ruby"><code class="language-ruby"><span class="token string">"kawejofsadjfnaksdfhoiae"</span><span class="token punctuation">.</span>delete <span class="token string">"a"</span><span class="token operator">=</span><span class="token operator">></span> <span class="token string">"kwejofsdjfnksdfhoie"</span></code></pre></li><li><p>chop和chomp</p><pre class=" language-ruby"><code class="language-ruby">a<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span>liaskdfaodsfasdflajfdoafd<span class="token operator">/</span>afdafdlajfoa<span class="token operator">/</span>nafdlkafok\n\n\nlib<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token operator">=</span>a<span class="token punctuation">,</span>a<span class="token punctuation">,</span>ap c<span class="token punctuation">.</span>chompp b<span class="token punctuation">.</span>chomp<span class="token operator">!</span>p a<span class="token punctuation">.</span>chopp d<span class="token punctuation">.</span>chop<span class="token operator">!</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>结果：<span class="token string">"askdfaodsf\nasdflajfdoafd/afd\nafdlajfoa/n\nafdlkafok\n\n\n"</span><span class="token string">"askdfaodsf\nasdflajfdoafd/afd\nafdlajfoa/n\nafdlkafok\n\n\n"</span><span class="token string">"askdfaodsf\nasdflajfdoafd/afd\nafdlajfoa/n\nafdlkafok\n\n"</span><span class="token string">"askdfaodsf\nasdflajfdoafd/afd\nafdlajfoa/n\nafdlkafok\n\n"</span>补充：<span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">001</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token string">"afkdj\n\r"</span><span class="token punctuation">.</span>chomp<span class="token operator">=</span><span class="token operator">></span> <span class="token string">"afkdj\n"</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">002</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token string">"afkdj\n\r"</span><span class="token punctuation">.</span>chomp<span class="token operator">!</span><span class="token operator">=</span><span class="token operator">></span> <span class="token string">"afkdj\n"</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">003</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token string">"afkdj\n\r"</span><span class="token punctuation">.</span>chop<span class="token operator">=</span><span class="token operator">></span> <span class="token string">"afkdj\n"</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">004</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token string">"afkdj\n"</span><span class="token punctuation">.</span>chop<span class="token operator">=</span><span class="token operator">></span> <span class="token string">"afkdj"</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">005</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token string">"afkdj\n"</span><span class="token punctuation">.</span>chomp<span class="token operator">=</span><span class="token operator">></span> <span class="token string">"afkdj"</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">006</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token string">"afkdj\n\n\n"</span><span class="token punctuation">.</span>chomp<span class="token operator">=</span><span class="token operator">></span> <span class="token string">"afkdj\n\n"</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">007</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token string">"afkdj\r\n"</span><span class="token punctuation">.</span>chomp<span class="token operator">=</span><span class="token operator">></span> <span class="token string">"afkdj"</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">008</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token string">"afkdj\n\r"</span><span class="token punctuation">.</span>chomp<span class="token operator">=</span><span class="token operator">></span> <span class="token string">"afkdj\n"</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">009</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token string">"afkdj\r\r\r"</span><span class="token punctuation">.</span>chomp<span class="token operator">=</span><span class="token operator">></span> <span class="token string">"afkdj\r\r"</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">010</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token string">"afkdj\r\n"</span><span class="token punctuation">.</span>chop<span class="token operator">=</span><span class="token operator">></span> <span class="token string">"afkdj"</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">011</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token string">"afkdj\n\r"</span><span class="token punctuation">.</span>chop<span class="token operator">=</span><span class="token operator">></span> <span class="token string">"afkdj\n"</span>可以看出chomp，chomp！，chop，chop<span class="token operator">!</span>效果是一样的如果字符末尾是\r\n则会去除\r\n后者只会去除一个字符</code></pre></li><li><p>字符替换</p><pre class=" language-ruby"><code class="language-ruby">str<span class="token operator">=</span><span class="token string">"alll of these is free"</span>str1<span class="token operator">=</span>str<span class="token punctuation">.</span>gsub <span class="token string">"alll"</span><span class="token punctuation">,</span><span class="token string">"all"</span>puts strputs str1<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>结果：alll of these is freeall of these is free可以看出gsub是拷贝传递</code></pre></li><li><p>反转字符串</p><pre class=" language-ruby"><code class="language-ruby">puts <span class="token string">"gnirts eht kcarc evah ruoY"</span><span class="token punctuation">.</span>reverse<span class="token operator">=</span><span class="token operator">></span> <span class="token string">"Your have crack the string"</span></code></pre></li><li><p>字符才拆分</p><pre class=" language-ruby"><code class="language-ruby">a<span class="token operator">=</span><span class="token string">"01234567"</span><span class="token punctuation">.</span>split<span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"01234567"</span><span class="token punctuation">]</span></code></pre></li><li><p>遍历字符串</p><pre class=" language-ruby"><code class="language-ruby"><span class="token string">"etc\nnginx\nconf.d"</span><span class="token punctuation">.</span>each_line <span class="token punctuation">{</span><span class="token operator">|</span>dir<span class="token operator">|</span> puts dir<span class="token punctuation">.</span>capitalize<span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>结果：<span class="token constant">Etc</span><span class="token constant">Nginx</span><span class="token constant">Conf</span><span class="token punctuation">.</span>d</code></pre></li><li><p>大小写转化</p><pre class=" language-ruby"><code class="language-ruby">puts <span class="token string">"HOW ARE YOU"</span><span class="token punctuation">.</span>downcaseputs <span class="token string">"how are you"</span><span class="token punctuation">.</span>upcase结果：how are you<span class="token constant">HOW</span> <span class="token constant">ARE</span> <span class="token constant">YOU</span></code></pre></li><li><p>去除字符串两边空白</p><pre class=" language-ruby"><code class="language-ruby">puts <span class="token string">"   hello        "</span><span class="token punctuation">.</span>striphello<span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">nil</span></code></pre></li><li><p>next函数</p></li></ul><pre class=" language-ruby"><code class="language-ruby"><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">001</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token string">"ab"</span><span class="token punctuation">.</span><span class="token keyword">next</span><span class="token operator">=</span><span class="token operator">></span> <span class="token string">"ac"</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">002</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token string">"110"</span><span class="token punctuation">.</span><span class="token keyword">next</span><span class="token operator">=</span><span class="token operator">></span> <span class="token string">"111"</span></code></pre><ul><li><p>class判断数据类型</p><pre class=" language-ruby"><code class="language-ruby"><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">003</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> a<span class="token operator">=</span><span class="token number">10</span><span class="token operator">=</span><span class="token operator">></span> <span class="token number">10</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">004</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> b<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">=</span><span class="token operator">></span> <span class="token string">"10"</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">005</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">Integer</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">006</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token operator">></span> <span class="token builtin">String</span></code></pre></li></ul><h4 id="数学计算"><a href="#数学计算" class="headerlink" title="数学计算"></a>数学计算</h4><ul><li><p>范围,Range</p><pre class=" language-ruby"><code class="language-ruby"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">14</span>        <span class="token comment" spellcheck="true">#true</span>digits<span class="token operator">=</span><span class="token builtin">Range</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>digits<span class="token punctuation">.</span>to_a</code></pre></li><li><p>查询数字</p><p><code>`</code>ruby<br>op=0<br>if !op.zero?</p><pre><code>puts 12/op</code></pre><p>else</p><pre><code>puts &quot;zero division&quot;</code></pre><p>if op.nonzero?</p><pre><code>puts 12/op</code></pre><p>else</p><pre><code>puts &quot;zero division&quot;</code></pre></li></ul><p>  irb(main):040:0&gt; (-1.0/0.0).infinite?<br>  =&gt; -1<br>  irb(main):041:0&gt; (1.0/0.0).infinite?<br>  =&gt; 1<br>  irb(main):042:0&gt; (1.0/0.0).finite?<br>  =&gt; false<br>  irb(main):043:0&gt; (-1.0/0.0).finite?<br>  =&gt; false<br>  irb(main):044:0&gt; 0.0.finite?<br>  =&gt; true    </p><p>  infinite（无穷）<br>  注意调用finite和infinite方法必须是浮点数<br>  nan方法也是一样的</p><pre><code>* 利用语句块逐一读取  ```ruby  100.downto(1){|i| print i,&quot; &quot;;sleep 1}  10.times{|i| print i,&quot; &quot;;sleep 1}  10.times do |i|      print i,&quot; &quot;      sleep 1  end  1.upto(100){|i| print i,&quot; &quot;;sleep 1}</code></pre><ul><li><p>其他数学计算</p><pre class=" language-ruby"><code class="language-ruby">puts <span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">.</span>absputs <span class="token number">5.32</span><span class="token punctuation">.</span>ceilputs <span class="token number">5.32</span><span class="token punctuation">.</span>floorputs <span class="token number">5.4</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>四舍五入<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">next</span><span class="token number">97</span><span class="token punctuation">.</span>chr结果：<span class="token number">40</span><span class="token number">6</span><span class="token number">5</span><span class="token number">5</span><span class="token number">2</span>a</code></pre></li><li><p>数学函数</p><pre class=" language-ruby"><code class="language-ruby">puts <span class="token constant">Math</span><span class="token punctuation">.</span>constantsputs <span class="token constant">Math</span><span class="token punctuation">:</span><span class="token symbol">:E</span>puts <span class="token constant">Math</span><span class="token punctuation">:</span><span class="token symbol">:PI</span>puts <span class="token constant">Math</span><span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>puts <span class="token constant">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>puts <span class="token constant">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">Math</span><span class="token punctuation">:</span><span class="token symbol">:E</span><span class="token punctuation">)</span>结果：<span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">001</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> puts <span class="token constant">Math</span><span class="token punctuation">.</span>constants<span class="token constant">DomainError</span><span class="token constant">PI</span><span class="token constant">E</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">nil</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">002</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> puts <span class="token constant">Math</span><span class="token punctuation">:</span><span class="token symbol">:E</span><span class="token number">2.718281828459045</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">nil</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">003</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> puts <span class="token constant">Math</span><span class="token punctuation">:</span><span class="token symbol">:PI</span><span class="token number">3.141592653589793</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">nil</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">004</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> puts <span class="token constant">Math</span><span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">2.718281828459045</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">nil</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">005</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> puts <span class="token constant">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">1.4142135623730951</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">nil</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">006</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> puts <span class="token constant">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">Math</span><span class="token punctuation">:</span><span class="token symbol">:E</span><span class="token punctuation">)</span><span class="token number">1.0</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">nil</span></code></pre></li><li><p>有理数</p><p><code>`</code>ruby<br>补充：<br>&lt;=&gt;    联合比较运算符。如果第一个操作数等于第二个操作数则返回 0，如果第一个操作数大于第二个操作数则返回 1，如果第一个操作数小于第二个操作数则返回 -1。<br>require “rational”<br>require “mathn”<br>rat=Rational(25/100)<br>rat += Rational(1/4)<br>p rat*=3<br>p rat.to_s<br>p rat.to_f<br>p rat</p></li></ul><p>  结果：<br>  (3/2)<br>  “3/2”<br>  1.5<br>  (3/2)</p><pre><code>* 质数  ```ruby  require &quot;rational&quot;  require &quot;mathn&quot;  Prime.each do |i|      puts i      if i&gt;100          break      end  end  for i in 1.step(13,2)      puts i  end  -----------------------------------------------------------------------------  Prime.new方法已经弃用，应用Prime.each    </code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li><p>数组常用</p><pre class=" language-ruby"><code class="language-ruby"><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">001</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> months<span class="token operator">=</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">002</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> months<span class="token punctuation">.</span>empty<span class="token operator">?</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">true</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">003</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> months<span class="token operator">=</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">]</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">004</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> months<span class="token punctuation">.</span>size<span class="token operator">=</span><span class="token operator">></span> <span class="token number">12</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">005</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> months<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token operator">></span> <span class="token number">12</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">006</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> months<span class="token punctuation">.</span>inspect<span class="token operator">=</span><span class="token operator">></span> <span class="token string">"[nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil]"</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">007</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> months<span class="token operator">=</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"month"</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"month"</span><span class="token punctuation">,</span> <span class="token string">"month"</span><span class="token punctuation">,</span> <span class="token string">"month"</span><span class="token punctuation">,</span> <span class="token string">"month"</span><span class="token punctuation">,</span> <span class="token string">"month"</span><span class="token punctuation">,</span> <span class="token string">"month"</span><span class="token punctuation">,</span> <span class="token string">"month"</span><span class="token punctuation">,</span> <span class="token string">"month"</span><span class="token punctuation">,</span> <span class="token string">"month"</span><span class="token punctuation">,</span> <span class="token string">"month"</span><span class="token punctuation">,</span> <span class="token string">"month"</span><span class="token punctuation">,</span> <span class="token string">"month"</span><span class="token punctuation">]</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">009</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> months<span class="token punctuation">.</span>clear<span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">011</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> months<span class="token punctuation">.</span>empty<span class="token operator">?</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">true</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">012</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> month<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"mcc"</span><span class="token punctuation">,</span><span class="token string">"mcc"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"mcc"</span><span class="token punctuation">,</span> <span class="token string">"mcc"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">014</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> months<span class="token operator">=</span><span class="token string">%w[mcc lsdfj sdaf 12 fda]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"mcc"</span><span class="token punctuation">,</span> <span class="token string">"lsdfj"</span><span class="token punctuation">,</span> <span class="token string">"sdaf"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">,</span> <span class="token string">"fda"</span><span class="token punctuation">]</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">015</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> months<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token string">"fda"</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">016</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> months<span class="token punctuation">.</span>include<span class="token operator">?</span> <span class="token string">"12"</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">true</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">017</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> years<span class="token operator">=</span><span class="token string">%w[2017 2018 2019 2012]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"2017"</span><span class="token punctuation">,</span> <span class="token string">"2018"</span><span class="token punctuation">,</span> <span class="token string">"2019"</span><span class="token punctuation">,</span> <span class="token string">"2012"</span><span class="token punctuation">]</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">018</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> all<span class="token operator">=</span>months<span class="token operator">+</span>years<span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"mcc"</span><span class="token punctuation">,</span> <span class="token string">"lsdfj"</span><span class="token punctuation">,</span> <span class="token string">"sdaf"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">,</span> <span class="token string">"fda"</span><span class="token punctuation">,</span> <span class="token string">"2017"</span><span class="token punctuation">,</span> <span class="token string">"2018"</span><span class="token punctuation">,</span> <span class="token string">"2019"</span><span class="token punctuation">,</span> <span class="token string">"2012"</span><span class="token punctuation">]</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">019</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> days<span class="token operator">=</span><span class="token string">%w[11 21 32 34]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">,</span> <span class="token string">"32"</span><span class="token punctuation">,</span> <span class="token string">"34"</span><span class="token punctuation">]</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">020</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> all<span class="token operator">&lt;</span><span class="token operator">&lt;</span>days<span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"mcc"</span><span class="token punctuation">,</span> <span class="token string">"lsdfj"</span><span class="token punctuation">,</span> <span class="token string">"sdaf"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">,</span> <span class="token string">"fda"</span><span class="token punctuation">,</span> <span class="token string">"2017"</span><span class="token punctuation">,</span> <span class="token string">"2018"</span><span class="token punctuation">,</span> <span class="token string">"2019"</span><span class="token punctuation">,</span> <span class="token string">"2012"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">,</span> <span class="token string">"32"</span><span class="token punctuation">,</span> <span class="token string">"34"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>digits<span class="token operator">=</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">9</span><span class="token punctuation">)</span></code></pre></li><li><p>集合操作</p><pre class=" language-ruby"><code class="language-ruby"><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">021</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> m<span class="token operator">=</span><span class="token string">%w[shop make_pi read sleep]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"shop"</span><span class="token punctuation">,</span> <span class="token string">"make_pi"</span><span class="token punctuation">,</span> <span class="token string">"read"</span><span class="token punctuation">,</span> <span class="token string">"sleep"</span><span class="token punctuation">]</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">022</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> n<span class="token operator">=</span><span class="token string">%w[shop make_pi read play]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"shop"</span><span class="token punctuation">,</span> <span class="token string">"make_pi"</span><span class="token punctuation">,</span> <span class="token string">"read"</span><span class="token punctuation">,</span> <span class="token string">"play"</span><span class="token punctuation">]</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">023</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> puts m<span class="token operator">-</span>nsleep<span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">nil</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">024</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> puts m<span class="token operator">&amp;</span>nshopmake_piread<span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">nil</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">025</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> puts m<span class="token operator">|</span>nshopmake_pireadsleepplay<span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">nil</span></code></pre></li><li><p>delete</p><pre class=" language-ruby"><code class="language-ruby"><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">026</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> m<span class="token operator">=</span><span class="token string">%w[shop make_pi read sleep]</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"shop"</span><span class="token punctuation">,</span> <span class="token string">"make_pi"</span><span class="token punctuation">,</span> <span class="token string">"read"</span><span class="token punctuation">,</span> <span class="token string">"sleep"</span><span class="token punctuation">]</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">028</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> m<span class="token punctuation">.</span>delete <span class="token string">"shop"</span><span class="token operator">=</span><span class="token operator">></span> <span class="token string">"shop"</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">029</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> m<span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"make_pi"</span><span class="token punctuation">,</span> <span class="token string">"read"</span><span class="token punctuation">,</span> <span class="token string">"sleep"</span><span class="token punctuation">]</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">030</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> m<span class="token punctuation">.</span>delete <span class="token number">2</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">nil</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">031</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> m<span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"make_pi"</span><span class="token punctuation">,</span> <span class="token string">"read"</span><span class="token punctuation">,</span> <span class="token string">"sleep"</span><span class="token punctuation">]</span><span class="token function">irb</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">032</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token operator">></span> m<span class="token punctuation">.</span>delete_at <span class="token number">2</span><span class="token operator">=</span><span class="token operator">></span> <span class="token string">"sleep"</span></code></pre></li><li><p>排序</p><pre class=" language-ruby"><code class="language-ruby">x<span class="token operator">=</span><span class="token string">%w[1 3 7 3 45 234 452 123 2]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">Range</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">.</span>size<span class="token punctuation">)</span>    x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to_i<span class="token keyword">end</span>puts x<span class="token punctuation">.</span>sortputs x<span class="token punctuation">.</span>reverse结果：<span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">3</span><span class="token number">7</span><span class="token number">45</span><span class="token number">123</span><span class="token number">234</span><span class="token number">452</span><span class="token number">0</span><span class="token number">2</span><span class="token number">123</span><span class="token number">452</span><span class="token number">234</span><span class="token number">45</span><span class="token number">3</span><span class="token number">7</span><span class="token number">3</span><span class="token number">1</span>这里同样可以看出ruby是拷贝传递并非值传递，这一点与go语言是相同的而与python，java不同</code></pre></li><li><p>多维数组</p><p><code>`</code>ruby<br>irb(main):001:0&gt; d=%w[[1 2 3][1 23 3][12 33 5]]<br>=&gt; [“[1”, “2”, “3][1”, “23”, “3][12”, “33”, “5]”]<br>这里需要注意不能这样定义二维数组，从上面可以看出返回的是一维数组</p></li></ul><p>  #二维数组转一维数组<br>  irb(main):006:0&gt; e=[[12 ,32, 43],[1213, 123 ,2],[21 ,32, 3]]<br>  =&gt; [[12, 32, 43], [1213, 123, 2], [21, 32, 3]]<br>  irb(main):007:0&gt; e.flatten<br>  =&gt; [12, 32, 43, 1213, 123, 2, 21, 32, 3]</p><pre><code>#### 哈希简单来说就是map* 建立哈希  ```ruby  irb(main):008:0&gt; months=Hash.new  =&gt; {}  irb(main):009:0&gt; months.empty?  =&gt; true  irb(main):010:0&gt; months.length  =&gt; 0  irb(main):011:0&gt; months.size  =&gt; 0  months=Hash.new(&quot;month&quot;)  months=Hash.new &quot;month&quot;  irb(main):012:0&gt; zip={1=&gt;&quot;tom&quot;,2=&gt;&quot;mcc&quot;,3=&gt;&quot;src&quot;}  =&gt; {1=&gt;&quot;tom&quot;, 2=&gt;&quot;mcc&quot;, 3=&gt;&quot;src&quot;}  irb(main):014:0&gt; zip[1]  =&gt; &quot;tom&quot;  irb(main):015:0&gt; zip.keys  =&gt; [1, 2, 3]  irb(main):016:0&gt; zip.values  =&gt; [&quot;tom&quot;, &quot;mcc&quot;, &quot;src&quot;]  zip={1=&gt;&quot;tom&quot;,2=&gt;&quot;mcc&quot;,3=&gt;&quot;src&quot;}  for k,v in zip      puts k.to_s+&quot; &quot;+v  end  输出：  1 tom  2 mcc  3 src  delaware={1=&gt;&quot;Kent&quot;,2=&gt;&quot;New Castle&quot;,3=&gt;&quot;Sussex&quot;}  rhold_island={1=&gt;&quot;Bristol&quot;,2=&gt;&quot;Kent&quot;,3=&gt;&quot;Newport&quot;,4=&gt;&quot;Province&quot;,5=&gt;&quot;Washington&quot;}  rhold_island.merge delaware  结果：  {1=&gt;&quot;Kent&quot;, 2=&gt;&quot;New Castle&quot;, 3=&gt;&quot;Sussex&quot;, 4=&gt;&quot;Province&quot;, 5=&gt;&quot;Washington&quot;}  和git合并差不多，保留合并的对象，删除旧的对象  delaware={1=&gt;&quot;Kent&quot;,2=&gt;&quot;New Castle&quot;,3=&gt;&quot;Sussex&quot;}  rhold_island={1=&gt;&quot;Bristol&quot;,2=&gt;&quot;Kent&quot;,3=&gt;&quot;Newport&quot;,4=&gt;&quot;Province&quot;,5=&gt;&quot;Washington&quot;}  s=rhold_island  p rhold_island  p rhold_island.to_a  p rhold_island.to_s  p rhold_island.sort                    #注意此处没有reverse方法  p rhold_island.delete(5)  p rhold_island.delete_if{|key,value| key&lt;3}  p rhold_island.delete_if{|key,value|value==&quot;Province&quot;}  p rhold_island.replace({3=&gt;&quot;mcc&quot;})  p s.clear  结果：  {1=&gt;&quot;Bristol&quot;, 2=&gt;&quot;Kent&quot;, 3=&gt;&quot;Newport&quot;, 4=&gt;&quot;Province&quot;, 5=&gt;&quot;Washington&quot;}  [[1, &quot;Bristol&quot;], [2, &quot;Kent&quot;], [3, &quot;Newport&quot;], [4, &quot;Province&quot;], [5, &quot;Washington&quot;]]  &quot;{1=&gt;\&quot;Bristol\&quot;, 2=&gt;\&quot;Kent\&quot;, 3=&gt;\&quot;Newport\&quot;, 4=&gt;\&quot;Province\&quot;, 5=&gt;\&quot;Washington\&quot;}&quot;  [[1, &quot;Bristol&quot;], [2, &quot;Kent&quot;], [3, &quot;Newport&quot;], [4, &quot;Province&quot;], [5, &quot;Washington&quot;]]  &quot;Washington&quot;  {3=&gt;&quot;Newport&quot;, 4=&gt;&quot;Province&quot;}  {3=&gt;&quot;Newport&quot;}  {3=&gt;&quot;mcc&quot;}  {}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言学习(二)</title>
      <link href="/2019/01/24/go-yu-yan-xue-xi-er/"/>
      <url>/2019/01/24/go-yu-yan-xue-xi-er/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/29.jpg?raw=true" alt="mcc"></p><h1 id="go语言练习题"><a href="#go语言练习题" class="headerlink" title="go语言练习题"></a>go语言练习题</h1><h4 id="1-练习：映射"><a href="#1-练习：映射" class="headerlink" title="1.练习：映射"></a>1.练习：映射</h4><p>实现 <code>WordCount</code>。它应当返回一个映射，其中包含字符串 <code>s</code> 中每个“单词”的个数。函数 <code>wc.Test</code> 会对此函数执行一系列测试用例，并输出成功还是失败。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">//"github.com/Go-zh/tour/wc"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">WordCount</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>    result<span class="token operator">:=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>ch <span class="token operator">:=</span><span class="token keyword">range</span> s<span class="token punctuation">{</span>        <span class="token boolean">_</span><span class="token punctuation">,</span>ok<span class="token operator">:=</span>result<span class="token punctuation">[</span><span class="token function">string</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> ok<span class="token punctuation">{</span>            result<span class="token punctuation">[</span><span class="token function">string</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            result<span class="token punctuation">[</span><span class="token function">string</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">WordCount</span><span class="token punctuation">(</span><span class="token string">"aaafadsafdsfdasdfafdawefdshtryeghdtgfdadsfafsd"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>输出：<span class="token keyword">map</span><span class="token punctuation">[</span>d<span class="token punctuation">:</span><span class="token number">10</span> s<span class="token punctuation">:</span><span class="token number">6</span> w<span class="token punctuation">:</span><span class="token number">1</span> e<span class="token punctuation">:</span><span class="token number">2</span> r<span class="token punctuation">:</span><span class="token number">1</span> y<span class="token punctuation">:</span><span class="token number">1</span> g<span class="token punctuation">:</span><span class="token number">2</span> a<span class="token punctuation">:</span><span class="token number">10</span> h<span class="token punctuation">:</span><span class="token number">2</span> t<span class="token punctuation">:</span><span class="token number">2</span> f<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span></code></pre><h4 id="2-练习：切片"><a href="#2-练习：切片" class="headerlink" title="2.练习：切片"></a>2.练习：切片</h4><p>实现 <code>Pic</code>。它应当返回一个长度为 <code>dy</code> 的切片，其中每个元素是一个长度为 <code>dx</code>，元素类型为 <code>uint8</code> 的切片。当你运行此程序时，它会将每个整数解释为灰度值（好吧，其实是蓝度值）并显示它所对应的图像。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"golang.org/x/tour/pic"</span>    <span class="token comment" spellcheck="true">//"fmt"</span>    <span class="token comment" spellcheck="true">//"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Pic</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//fmt.Println(dx,"\t",dy)</span>    <span class="token keyword">var</span> s <span class="token operator">=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">,</span>dy<span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dx<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">,</span>dx<span class="token punctuation">)</span>        <span class="token keyword">for</span> t<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span>dy<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//s[i][t]=uint8(float64(i)*math.Log(float64(t)))</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">uint8</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    pic<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span>Pic<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>输出是一幅蓝底图像补充：刚看到这里时有点不理解dx<span class="token punctuation">,</span>dy为什么没有被赋值，然后打印了一下dx<span class="token punctuation">,</span>dy<span class="token punctuation">,</span>发现输出如下<span class="token number">256</span>      <span class="token number">256</span>IMAGE<span class="token punctuation">:</span>一段特别长的base64编码</code></pre><h4 id="3-练习：斐波纳契闭包"><a href="#3-练习：斐波纳契闭包" class="headerlink" title="3.练习：斐波纳契闭包"></a>3.练习：斐波纳契闭包</h4><p>实现一个 <code>fibonacci</code> 函数，它返回一个函数（闭包），该闭包返回一个<a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97" target="_blank" rel="noopener">斐波纳契数列</a><code>(0, 1, 1, 2, 3, 5, ...)</code>。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment" spellcheck="true">// 返回一个“返回int的函数”</span><span class="token keyword">func</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    s1<span class="token punctuation">,</span>s2<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">int</span><span class="token punctuation">{</span>        temp<span class="token operator">:=</span>s1        s1<span class="token punctuation">,</span>s2<span class="token operator">=</span>s2<span class="token punctuation">,</span>s1<span class="token operator">+</span>s2        <span class="token keyword">return</span> temp    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f <span class="token operator">:=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>这个闭包还是挺难理解的，我的理解是闭包函数给每个实例分配了一个独立的空间，这个空间内所有操作是独立的。</code></pre><h4 id="4-练习：Stringer"><a href="#4-练习：Stringer" class="headerlink" title="4.练习：Stringer"></a>4.练习：Stringer</h4><p>通过让 <code>IPAddr</code> 类型实现 <code>fmt.Stringer</code> 来打印点号分隔的地址。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">import</span> <span class="token string">"strconv"</span><span class="token keyword">type</span> IPAddr <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token comment" spellcheck="true">// TODO: 给 IPAddr 添加一个 "String() string" 方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>ip IPAddr<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token builtin">string</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span>ch<span class="token operator">:=</span><span class="token keyword">range</span> ip<span class="token punctuation">{</span>        result<span class="token operator">+=</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i<span class="token operator">!=</span><span class="token number">3</span><span class="token punctuation">{</span>            result<span class="token operator">+=</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    hosts <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>IPAddr<span class="token punctuation">{</span>        <span class="token string">"loopback"</span><span class="token punctuation">:</span>  <span class="token punctuation">{</span><span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"googleDNS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> name<span class="token punctuation">,</span> ip <span class="token operator">:=</span> <span class="token keyword">range</span> hosts <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v: %v\n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> ip<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5-练习：错误"><a href="#5-练习：错误" class="headerlink" title="5.练习：错误"></a>5.练习：错误</h4><p><code>Sqrt</code> 接受到一个负数时，应当返回一个非 nil 的错误值。复数同样也不被支持。</p><p>创建一个新的类型</p><pre><code>type ErrNegativeSqrt float64</code></pre><p>并为其实现</p><pre><code>func (e ErrNegativeSqrt) Error() string</code></pre><p>方法使其拥有 <code>error</code> 值，通过 <code>ErrNegativeSqrt(-2).Error()</code> 调用该方法应返回 <code>&quot;cannot Sqrt negative number: -2&quot;</code>。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">type</span> ErrNegativeSqrt <span class="token builtin">float64</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e ErrNegativeSqrt<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> e<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"can't Sqrt negative number:%v"</span><span class="token punctuation">,</span><span class="token function">float64</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">" Sqrt number:%v"</span><span class="token punctuation">,</span>math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Sqrt</span><span class="token punctuation">(</span>x <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> s<span class="token operator">=</span><span class="token function">ErrNegativeSqrt</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> u<span class="token operator">=</span><span class="token function">ErrNegativeSqrt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">34</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="6-练习：rot13Reader"><a href="#6-练习：rot13Reader" class="headerlink" title="6.练习：rot13Reader"></a>6.练习：rot13Reader</h4><p>有种常见的模式是一个 <a href="https://go-zh.org/pkg/io/#Reader" target="_blank" rel="noopener"><code>io.Reader</code></a> 包装另一个 <code>io.Reader</code>，然后通过某种方式修改其数据流。</p><p>例如，<a href="https://go-zh.org/pkg/compress/gzip/#NewReader" target="_blank" rel="noopener"><code>gzip.NewReader</code></a> 函数接受一个 <code>io.Reader</code>（已压缩的数据流）并返回一个同样实现了 <code>io.Reader</code> 的 <code>*gzip.Reader</code>（解压后的数据流）。</p><p>编写一个实现了 <code>io.Reader</code> 并从另一个 <code>io.Reader</code> 中读取数据的 <code>rot13Reader</code>，通过应用 <a href="http://en.wikipedia.org/wiki/ROT13" target="_blank" rel="noopener">rot13</a> 代换密码对数据流进行修改。</p><p><code>rot13Reader</code> 类型已经提供。实现 <code>Read</code> 方法以满足 <code>io.Reader</code>。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"io"</span>    <span class="token string">"os"</span>    <span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">type</span> rot13Reader <span class="token keyword">struct</span> <span class="token punctuation">{</span>    r io<span class="token punctuation">.</span>Reader<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">rot</span><span class="token punctuation">(</span>b <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">byte</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> b<span class="token operator">>=</span><span class="token string">'A'</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">&lt;=</span><span class="token string">'Z'</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> b<span class="token operator">&lt;</span><span class="token string">'N'</span><span class="token punctuation">{</span>                b<span class="token operator">+=</span><span class="token number">13</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                                b<span class="token operator">-=</span><span class="token number">13</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> b<span class="token operator">>=</span><span class="token string">'a'</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> b<span class="token operator">&lt;</span><span class="token string">'n'</span><span class="token punctuation">{</span>                b<span class="token operator">+=</span><span class="token number">13</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                b<span class="token operator">-=</span><span class="token number">13</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>rot13 rot13Reader<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>str <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token punctuation">,</span>ich<span class="token operator">:=</span>rot13<span class="token punctuation">.</span>r<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>        str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">rot</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n<span class="token punctuation">,</span>ich<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span><span class="token string">"Lbh penpxrq gur pbqr!"</span><span class="token punctuation">)</span>    r <span class="token operator">:=</span> rot13Reader<span class="token punctuation">{</span>s<span class="token punctuation">}</span>    io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="7-练习：图像"><a href="#7-练习：图像" class="headerlink" title="7.练习：图像"></a>7.练习：图像</h4><p>定义你自己的 <code>Image</code> 类型，实现<a href="https://go-zh.org/pkg/image/#Image" target="_blank" rel="noopener">必要的方法</a>并调用 <code>pic.ShowImage</code>。</p><p><code>Bounds</code> 应当返回一个 <code>image.Rectangle</code> ，例如 <code>image.Rect(0, 0, w, h)</code>。</p><p><code>ColorModel</code> 应当返回 <code>color.RGBAModel</code>。</p><p><code>At</code> 应当返回一个颜色。上一个图片生成器的值 <code>v</code> 对应于此次的 <code>color.RGBA{v, v, 255, 255}</code>。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"golang.org/x/tour/pic"</span><span class="token keyword">import</span> <span class="token string">"image"</span><span class="token keyword">import</span> <span class="token string">"image/color"</span><span class="token keyword">type</span> Image <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mcc Image<span class="token punctuation">)</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> image<span class="token punctuation">.</span>Rectangle<span class="token punctuation">{</span>    <span class="token keyword">return</span> image<span class="token punctuation">.</span><span class="token function">Rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mcc Image<span class="token punctuation">)</span><span class="token function">ColorModel</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> color<span class="token punctuation">.</span>Model<span class="token punctuation">{</span>    <span class="token keyword">return</span> color<span class="token punctuation">.</span>RGBAModel<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mcc Image<span class="token punctuation">)</span><span class="token function">At</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y <span class="token builtin">int</span><span class="token punctuation">)</span> color<span class="token punctuation">.</span>Color<span class="token punctuation">{</span>    <span class="token keyword">return</span> color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token function">uint8</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">uint8</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    m <span class="token operator">:=</span> Image<span class="token punctuation">{</span><span class="token punctuation">}</span>    pic<span class="token punctuation">.</span><span class="token function">ShowImage</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="8-练习：等价二叉查找树"><a href="#8-练习：等价二叉查找树" class="headerlink" title="8.练习：等价二叉查找树"></a>8.练习：等价二叉查找树</h4><p><strong>1.</strong> 实现 <code>Walk</code> 函数。</p><p><strong>2.</strong> 测试 <code>Walk</code> 函数。</p><p>函数 <code>tree.New(k)</code> 用于构造一个随机结构的已排序二叉查找树，它保存了值 <code>k</code>, <code>2k</code>, <code>3k</code>, …, <code>10k</code>。</p><p>创建一个新的信道 <code>ch</code> 并且对其进行步进：</p><pre><code>go Walk(tree.New(1), ch)</code></pre><p>然后从信道中读取并打印 10 个值。应当是数字 <code>1, 2, 3, ..., 10</code>。</p><p><strong>3.</strong> 用 <code>Walk</code> 实现 <code>Same</code> 函数来检测 <code>t1</code> 和 <code>t2</code> 是否存储了相同的值。</p><p><strong>4.</strong> 测试 <code>Same</code> 函数。</p><p><code>Same(tree.New(1), tree.New(1))</code> 应当返回 <code>true</code>，而 <code>Same(tree.New(1), tree.New(2))</code> 应当返回 <code>false</code>。</p><p><code>Tree</code> 的文档可在<a href="https://godoc.org/golang.org/x/tour/tree#Tree" target="_blank" rel="noopener">这里</a>找到。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"golang.org/x/tour/tree"</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment" spellcheck="true">// Walk 步进 tree t 将所有的值从 tree 发送到 channel ch。</span><span class="token keyword">func</span> <span class="token function">Walk</span><span class="token punctuation">(</span>t <span class="token operator">*</span>tree<span class="token punctuation">.</span>Tree<span class="token punctuation">,</span> ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">getValue</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>ch<span class="token punctuation">)</span>    <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">getValue</span><span class="token punctuation">(</span>t <span class="token operator">*</span>tree<span class="token punctuation">.</span>Tree<span class="token punctuation">,</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> t<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span>        <span class="token function">getValue</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Left<span class="token punctuation">,</span>ch<span class="token punctuation">)</span>        ch<span class="token operator">&lt;-</span>t<span class="token punctuation">.</span>Value        <span class="token function">getValue</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Right<span class="token punctuation">,</span>ch<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Same 检测树 t1 和 t2 是否含有相同的值。</span><span class="token keyword">func</span> <span class="token function">Same</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2 <span class="token operator">*</span>tree<span class="token punctuation">.</span>Tree<span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">{</span>    ch1<span class="token operator">:=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    ch2<span class="token operator">:=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">Walk</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>ch1<span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">Walk</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span>ch2<span class="token punctuation">)</span>    <span class="token keyword">for</span> n<span class="token operator">:=</span><span class="token keyword">range</span> ch1<span class="token punctuation">{</span>        <span class="token keyword">if</span> n<span class="token operator">!=</span><span class="token operator">&lt;-</span>ch2<span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> ch<span class="token operator">=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token function">Walk</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ch<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span><span class="token keyword">range</span> ch<span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">Same</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tree<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>####9.练习：Web 爬虫</p><p>在这个练习中，我们将会使用 Go 的并发特性来并行化一个 Web 爬虫。</p><p>修改 <code>Crawl</code> 函数来并行地抓取 URL，并且保证不重复。</p><p><em>提示</em>：你可以用一个 map 来缓存已经获取的 URL，但是要注意 map 本身并不是并发安全的！</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token keyword">var</span><span class="token punctuation">(</span>    m<span class="token operator">=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    l sync<span class="token punctuation">.</span>Mutex    i sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span><span class="token keyword">type</span> Fetcher <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Fetch 返回 URL 的 body 内容，并且将在这个页面上找到的 URL 放到一个 slice 中。</span>    <span class="token function">Fetch</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>body <span class="token builtin">string</span><span class="token punctuation">,</span> urls <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Crawl 使用 fetcher 从某个 URL 开始递归的爬取页面，直到达到最大深度。</span><span class="token keyword">func</span> <span class="token function">Crawl</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">,</span> depth <span class="token builtin">int</span><span class="token punctuation">,</span> fetcher Fetcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO: 并行的抓取 URL。</span>    <span class="token comment" spellcheck="true">// TODO: 不重复抓取页面。</span>        <span class="token comment" spellcheck="true">// 下面并没有实现上面两种情况：</span>    <span class="token keyword">defer</span> i<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> depth<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>     <span class="token punctuation">}</span>    <span class="token boolean">_</span><span class="token punctuation">,</span>urls<span class="token punctuation">,</span>erro<span class="token operator">:=</span>fetcher<span class="token punctuation">.</span><span class="token function">Fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">if</span> erro<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>     <span class="token punctuation">}</span>    l<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> m<span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">{</span>        m<span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token operator">++</span>        depth<span class="token operator">--</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>u<span class="token operator">:=</span><span class="token keyword">range</span> urls<span class="token punctuation">{</span>            i<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">go</span> <span class="token function">Crawl</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>depth<span class="token punctuation">,</span>fetcher<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    l<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    i<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">Crawl</span><span class="token punctuation">(</span><span class="token string">"https://golang.org/"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> fetcher<span class="token punctuation">)</span>    i<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span><span class="token boolean">_</span><span class="token operator">:=</span><span class="token keyword">range</span> m<span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"the crawl is over"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// fakeFetcher 是返回若干结果的 Fetcher。</span><span class="token keyword">type</span> fakeFetcher <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>fakeResult<span class="token keyword">type</span> fakeResult <span class="token keyword">struct</span> <span class="token punctuation">{</span>    body <span class="token builtin">string</span>    urls <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f fakeFetcher<span class="token punctuation">)</span> <span class="token function">Fetch</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> res<span class="token punctuation">,</span> ok <span class="token operator">:=</span> f<span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span>body<span class="token punctuation">,</span> res<span class="token punctuation">.</span>urls<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"not found: %s"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// fetcher 是填充后的 fakeFetcher。</span><span class="token keyword">var</span> fetcher <span class="token operator">=</span> fakeFetcher<span class="token punctuation">{</span>    <span class="token string">"https://golang.org/"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>fakeResult<span class="token punctuation">{</span>        <span class="token string">"The Go Programming Language"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>            <span class="token string">"https://golang.org/pkg/"</span><span class="token punctuation">,</span>            <span class="token string">"https://golang.org/cmd/"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"https://golang.org/pkg/"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>fakeResult<span class="token punctuation">{</span>        <span class="token string">"Packages"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>            <span class="token string">"https://golang.org/"</span><span class="token punctuation">,</span>            <span class="token string">"https://golang.org/cmd/"</span><span class="token punctuation">,</span>            <span class="token string">"https://golang.org/pkg/fmt/"</span><span class="token punctuation">,</span>            <span class="token string">"https://golang.org/pkg/os/"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"https://golang.org/pkg/fmt/"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>fakeResult<span class="token punctuation">{</span>        <span class="token string">"Package fmt"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>            <span class="token string">"https://golang.org/"</span><span class="token punctuation">,</span>            <span class="token string">"https://golang.org/pkg/"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"https://golang.org/pkg/os/"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>fakeResult<span class="token punctuation">{</span>        <span class="token string">"Package os"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>            <span class="token string">"https://golang.org/"</span><span class="token punctuation">,</span>            <span class="token string">"https://golang.org/pkg/"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><blockquote><p>总结：</p><p>这个题是真的很难，花了一个下午的时间补习各种操作系统原理相关的知识，copy的一篇博文上的解决方法</p><ul><li><p>1.先从审题开始：这道题简单来说就是无重复的提取<code>golang.org</code>域名下网页，而且查询的深度在4为四层</p></li><li><p>2.构造了一个fackFetcher用来存储即将爬取的url信息</p></li><li><p>3.fackResult其实就是每个网页内的urls，然后利用Fetch函数实现抓取一个网页内的所有url</p></li><li><p>4.需要补充的一些知识点</p><ul><li><p>defer这个关键字，这句话后的语句是在return值传递之后退出函数之前执行，简单来说就是先将要返回的值拷贝，再执行defer后的语句，最后退出函数，将值传出</p></li><li><p>go关键字，查了一些资料，不过还是不太懂go的详细机制，这里只是按个人的理解讲一下，go之后是并发执行的语句，也就是说在主协程之外再开一个子协程来跑这个协程，但很怪的的是它执行的顺序是特别不清晰的并不是严格的按顺序执行</p></li><li><p>再就是sync.Mutex和 sync.WaitGroup了</p><blockquote><p>1.首先sync.Mutex类型有两个方法Lock()和Unlock()，Lock()用于上锁，限制资源的访问，上面的代码中一个博主的解释是:<strong>存入数据  需要同步锁  因为这是在子线程中</strong>,这里通俗的解释就是因为上面开了多个协程，当多个协程访问同一变量时就特别容易造成错误，因此需要上锁，保证一段时间内变量只能被一个协程读取和修改</p><p>2.再来说一下 sync.WaitGroup，这个类型有三种方法，分别是Add()，Done()以及Wait()，Add()用来添加计数。Done()用来在操作结束时调用，使计数减一。Wait()用来等待所有的操作结束，即计数变为0，该函数会在计数不为0时等待，在计数为0时立即返回。</p></blockquote></li><li><p>最后讲一下interface这个关键字，简单的来说就是凡是实现了interface这个类型中所有方法的struct都是interface这个类型，间接实现了c++中的多态</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Fetcher <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Fetch 返回 URL 的 body 内容，并且将在这个页面上找到的 URL 放到一个 slice 中。</span>    <span class="token function">Fetch</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>body <span class="token builtin">string</span><span class="token punctuation">,</span> urls <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f fakeFetcher<span class="token punctuation">)</span> <span class="token function">Fetch</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> res<span class="token punctuation">,</span> ok <span class="token operator">:=</span> f<span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span>body<span class="token punctuation">,</span> res<span class="token punctuation">.</span>urls<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"not found: %s"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>学go语言已经几天了，总算官网上的习题全部都结束了，其实学习还是挺折腾，但学完之后觉得还是挺值得，一直以来都没有特别深入的研究过算法，打算再学习一段时间的go和Ruby之后学习一下算法，有时候真的感觉做过C课设的真的挺厉害的，​继续加油吧。​</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习总结</title>
      <link href="/2019/01/23/docker-xue-xi-zong-jie/"/>
      <url>/2019/01/23/docker-xue-xi-zong-jie/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/30.jpg?raw=true" alt="mcc"></p><h1 id="docker学习总结"><a href="#docker学习总结" class="headerlink" title="docker学习总结"></a>docker学习总结</h1><blockquote><p>最近学了一下docker容器，感觉还是挺实用的，分享一下</p></blockquote><ul><li>重要的一条命令先打印一下</li></ul><pre class=" language-dockerfile"><code class="language-dockerfile">docker run -it --rm --name (contain_name) -p host_port:container_port -v host_dir:container_dir  image_id </code></pre><p>这个命令制定了运行容器后直接删除，然后建立了端口映射和volume映射，感觉学了这么多，这条命令最常用</p><ul><li>docker中常用的命令</li></ul><pre class=" language-dockerfile"><code class="language-dockerfile">docker ps                    打印存活containerdocker ps -a                打印所有containerdocker images                 打印所有镜像docker start/restart/stop    开/重启/关闭容器docker rm container            删除容器docker rmi images            删除镜像</code></pre><ul><li>Dockerfile编写</li></ul><pre class=" language-dockerfile"><code class="language-dockerfile">关键字FROM 镜像名RUN 执行安装命令CMD 执行默认命令ENTRYPOINT 执行命令VOLUME 卷积块挂载EXPOSE 暴露端口WORKDIR 指定默认目录ONBUILD 指定当被用作父镜像时需要执行的命令MAINTAINER 作者信息ENV 设置环境变量</code></pre><blockquote><ol><li>RUN 执行命令并创建新的镜像层，RUN 经常用于安装软件包。</li><li>CMD 设置容器启动后默认执行的命令及其参数，但 CMD 能够被 <code>docker run</code> 后面跟的命令行参数替换。</li><li>ENTRYPOINT 配置容器启动时运行的命令。</li></ol></blockquote><pre class=" language-dockerfile"><code class="language-dockerfile">docker build -f Dockerfile_name -t docker_image_name:tag</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言学习(一)</title>
      <link href="/2019/01/22/go-yu-yan-xue-xi-yi/"/>
      <url>/2019/01/22/go-yu-yan-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/27.jpg?raw=true" alt="mcc"></p><h1 id="Go语言学习第一天"><a href="#Go语言学习第一天" class="headerlink" title="Go语言学习第一天"></a>Go语言学习第一天</h1><blockquote><p>无意中接触到Go语言，觉得Go真的是一个挺特别的语言，感觉既有c++习惯又有python的风格，最最重要是Google这个father，听说适合做服务器运维，因此学一下。下面是我的工程目录结构</p></blockquote><p><img src="https://github.com/mcc321/mcc/blob/master/img/go.png?raw=true" alt="mcc"></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    mcc <span class="token string">"./test"</span>                        <span class="token comment" spellcheck="true">//这里包的导入与python类似</span>    <span class="token string">"fmt"</span>    <span class="token string">"reflect"</span>    <span class="token string">"time"</span>    <span class="token string">"unsafe"</span><span class="token punctuation">)</span><span class="token keyword">const</span> imooc <span class="token builtin">string</span> <span class="token operator">=</span><span class="token string">"慕课网"</span>               <span class="token comment" spellcheck="true">//常量显示声明</span><span class="token keyword">const</span> name<span class="token operator">=</span><span class="token string">"我是zhang不大的先生"</span>            <span class="token comment" spellcheck="true">//常量隐式声明</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    cat <span class="token builtin">string</span><span class="token operator">=</span><span class="token string">"猫"</span>                        <span class="token comment" spellcheck="true">//这是go的一种特殊声明常量，变量的形式</span>    dog<span class="token operator">=</span><span class="token string">"狗"</span><span class="token punctuation">)</span><span class="token keyword">var</span> r<span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token number">1111</span><span class="token punctuation">,</span><span class="token number">2222</span>                        <span class="token comment" spellcheck="true">//隐式声明多个变量</span><span class="token keyword">type</span> hcc <span class="token builtin">uint</span>                            <span class="token comment" spellcheck="true">//别名</span><span class="token keyword">var</span><span class="token punctuation">(</span>    c <span class="token builtin">string</span> <span class="token operator">=</span><span class="token string">"mcc"</span>    d <span class="token builtin">int</span> <span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">const</span> sr<span class="token operator">=</span><span class="token boolean">iota</span>                            <span class="token comment" spellcheck="true">/*这里需要说一下:iota是golang语言的常量计数器,只能在常量的表达式中使用。iota在const关键字出现时将被重置为0(const内部的第一行之前)，const中每新增一行常量声明将使iota计数一次(iota可理解为const语句块中的行索引)。*/</span><span class="token keyword">const</span> ji<span class="token operator">=</span><span class="token boolean">iota</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    gi<span class="token operator">=</span><span class="token boolean">iota</span>    <span class="token boolean">_</span><span class="token operator">=</span><span class="token boolean">iota</span>    gp<span class="token operator">=</span><span class="token boolean">iota</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    si<span class="token operator">=</span><span class="token boolean">iota</span>    sp<span class="token operator">=</span><span class="token number">3.14</span>                                <span class="token comment" spellcheck="true">//iota插队</span>    sl<span class="token operator">=</span><span class="token boolean">iota</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mcc<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">//使用别名</span>    <span class="token keyword">var</span> i <span class="token builtin">uint</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"uint:"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> f <span class="token builtin">float32</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\nfloat32:"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> b <span class="token builtin">bool</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"bool:"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> src hcc <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">var</span> src2 hcc    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>src2 <span class="token operator">+</span> src<span class="token punctuation">)</span>    <span class="token keyword">var</span> rt<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">11213213.1</span><span class="token punctuation">,</span> <span class="token number">2123212</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> ru <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> ru<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>    su<span class="token punctuation">,</span> ss <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>su<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">,</span> ss<span class="token punctuation">)</span>    <span class="token keyword">var</span> ds<span class="token punctuation">,</span> dd<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">32</span>    <span class="token keyword">var</span> df<span class="token operator">=</span><span class="token function">int64</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span>ds<span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">,</span>dd<span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">,</span>df<span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span>mcc<span class="token punctuation">.</span>B<span class="token punctuation">)</span>    <span class="token keyword">const</span> apple<span class="token punctuation">,</span>banana <span class="token builtin">string</span><span class="token operator">=</span><span class="token string">"苹果"</span><span class="token punctuation">,</span><span class="token string">"香蕉"</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span>apple<span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">,</span>banana<span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span>dog<span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">,</span>cat<span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> alen<span class="token operator">=</span><span class="token function">len</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>alen<span class="token punctuation">)</span>    <span class="token keyword">var</span> um<span class="token operator">=</span><span class="token function">ic</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span>um<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"gp的值为："</span><span class="token punctuation">,</span>gp<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span>si<span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">,</span>sp<span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">,</span>sl<span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">if</span> a<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"a>0\n"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> a<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"a&lt;4\n"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"a>=4\n"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"a&lt;=0\n"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> gui <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    gui<span class="token operator">=</span><span class="token string">"afd"</span>    <span class="token keyword">switch</span> gui<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n值为int"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n值为string"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n值为default\n"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"mcc"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> sss<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"香蕉"</span><span class="token punctuation">,</span><span class="token string">"苹果"</span><span class="token punctuation">,</span><span class="token string">"梨子"</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value<span class="token operator">:=</span><span class="token keyword">range</span> sss<span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"key的值为："</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"value的值为："</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>value<span class="token operator">:=</span><span class="token keyword">range</span> sss<span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"value的值为："</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"中间代码块\n"</span><span class="token punctuation">)</span>    One<span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"这里是代码块一\n"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>        a<span class="token operator">++</span>        <span class="token keyword">if</span> a<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">{</span>            <span class="token keyword">goto</span> two    <span class="token punctuation">}</span>    <span class="token keyword">goto</span> One    two<span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"this is two"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">ic</span><span class="token punctuation">(</span>b <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"asd"</span><span class="token punctuation">}</span></code></pre><blockquote><p>总结：</p><p>不知道大家注意到没go的许多语法习惯都与c++是反着的，然后需要说明的是go的语法要求很严格。下面所几个需要注意的点</p><ul><li>大家是后就会发现即使是<code>{}</code>中<code>{</code>换行也会有报错。还有需要注意的一点是bool类型只有true和false，非零不是true</li><li>再有就是<code>if else</code>语句</li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> 条件<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>这里需要注意else不能换行</p><ul><li>再有就是<code>switch</code>语句</li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">switch</span> gui<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n值为int"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n值为string"</span><span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"\n值为default\n"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>这里可以看出go中不同于c++，不用在每个条件之后添加break</p><ul><li>最后是数组</li></ul><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> sss<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"香蕉"</span><span class="token punctuation">,</span><span class="token string">"苹果"</span><span class="token punctuation">,</span><span class="token string">"梨子"</span><span class="token punctuation">}</span></code></pre><p>这里可以特别明显的看出与c++和大多数编程语言是相反的</p><ul><li>Go中包中的函数或变量必须首字母大写才能被其他文件引用</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt窗口介绍</title>
      <link href="/2019/01/15/qt-chuang-kou-jie-shao/"/>
      <url>/2019/01/15/qt-chuang-kou-jie-shao/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/25.jpg?raw=true" alt="mcc"></p><h1 id="Qt窗口之QMainWindow、QDialog、QWidget"><a href="#Qt窗口之QMainWindow、QDialog、QWidget" class="headerlink" title="Qt窗口之QMainWindow、QDialog、QWidget"></a>Qt窗口之QMainWindow、QDialog、QWidget</h1><blockquote><p>在 Qt 中，我们将窗口和控件统称为部件（Widget）。</p></blockquote><ul><li><p>窗口是指程序的整体界面，可以包含标题栏、菜单栏、工具栏、关闭按钮、最小化按钮、最大化按钮等。</p></li><li><p>控件是指按钮、复选框、文本框、表格、进度条等这些组成程序的基本元素。一个程序可以有多个窗口，一个窗口也可以有多个控件。</p></li></ul><blockquote><p> QWidget 是所有用户界面元素的基类，窗口和控件都是直接或间接继承自 QWidget，QMainWindow、QWidget、QDialog 三个类就是用来创建窗口的，可以直接使用也可以继承后再使用。</p></blockquote><ul><li><p>QMainWindow 窗口可以包含菜单栏、工具栏、状态栏、标题栏等，是最常见的窗口形式，可以作为GUI程序的主窗口。</p></li><li><p>QDialog 是对话框窗口的基类。对话框主要用来执行短期任务，或与用户进行互动，它可以是模态的也可以是非模态的。QDialog 没有菜单栏、工具栏、状态栏等。</p></li><li>如果是主窗口，就使用 QMainWindow；如果是对话框，就是用 QDialog；如果不确定，或有可能作为顶级窗口，也有可能嵌入到其他窗口中，那么使用 QWidget。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Qt窗口之QMainWindow、QDialog、QWidget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt-c++学习记录(二)</title>
      <link href="/2019/01/15/qt-c-xue-xi-ji-lu-er/"/>
      <url>/2019/01/15/qt-c-xue-xi-ji-lu-er/</url>
      
        <content type="html"><![CDATA[<h1 id="图像文件操作"><a href="#图像文件操作" class="headerlink" title="图像文件操作"></a>图像文件操作</h1><p><img src="https://github.com/mcc321/mcc/blob/master/img/23.jpg?raw=true" alt="mcc"></p><pre class=" language-c++"><code class="language-c++">//mainwindow.h#pragma once#ifndef mainwindow_h#define mainwindow_h#include <QObject>#include <QtWidgets>#include <QtGui>#include <QMainWindow>#include <QMainWindow>#include "ui_book.h"class mainwindow : public QMainWindow{    Q_OBJECTpublic:    mainwindow(QWidget *parent=Q_NULLPTR);    ~mainwindow();private:    Ui::bookClass ui;//这里的bookClass来自于ui_book.h,这个文件是通过qt-designer生成的。    QDockWidget *dockimage;    QString currentPath;    QLabel* imglabel;    void InitImage();    void Menu_File();private slots:    void file_new();    void file_open();    void file_save();    void file_saveas();};#endif</code></pre><pre class=" language-c++"><code class="language-c++">//mainwindow.cpp#include "stdafx.h"#include "mainwindow.h"#include <QtWidgets>#include <QMainWindow>#pragma execution_character_set("utf-8")    mainwindow::mainwindow(QWidget *parent)    :QMainWindow(parent){    ui.setupUi(this);    Menu_File();    InitImage();}mainwindow::~mainwindow(){}void mainwindow::Menu_File(){    QMenu *file = menuBar()->addMenu(tr("文件"));    QAction *act_file_new = new QAction(QIcon("C:\\Users\\MCC\\Pictures\\assert\\life_is_strange_icon.png"),tr("新建"),this);//这里的地址应该换成本地地址    act_file_new->setShortcuts(QKeySequence::New);    connect(act_file_new, SIGNAL(triggered()), this, SLOT(file_new()));    QAction *act_file_open = new QAction(QIcon("C:\\Users\\MCC\\Pictures\\assert\\life_is_strange_icon.png"), tr("打开"), this);    act_file_open->setShortcuts(QKeySequence::Open);// 快捷键 Ctrl+O    connect(act_file_open, SIGNAL(triggered()), this, SLOT(file_open()));    QAction *act_file_save = new QAction(QIcon("C:\\Users\\MCC\\Pictures\\assert\\life_is_strange_icon.png"), tr("保存"), this);    act_file_save->setShortcuts(QKeySequence::Save);// 快捷键 Ctrl+S    connect(act_file_save, SIGNAL(triggered()), this, SLOT(file_save()));    QAction *act_file_saveas = new QAction(QIcon("C:\\Users\\MCC\\Pictures\\assert\\life_is_strange_icon.png"), tr("另存为"), this);    act_file_saveas->setShortcuts(QKeySequence::SaveAs);    connect(act_file_saveas, SIGNAL(triggered()), this, SLOT(file_saveas()));    QAction *act_file_close = new QAction(QIcon("C:\\Users\\MCC\\Pictures\\assert\\life_is_strange_icon.png"), tr("关闭"), this);    act_file_close->setShortcut(QKeySequence::Close);    connect(act_file_close, SIGNAL(triggered()), this, SLOT(close()));    file->addAction(act_file_new);    file->addAction(act_file_open);    file->addAction(act_file_save);    file->addAction(act_file_saveas);    file->addSeparator();    file->addAction(act_file_close);    act_file_new->setStatusTip(tr("新建图像"));    act_file_open->setStatusTip(tr("打开图像"));    act_file_save->setStatusTip(tr("保存图像"));    act_file_saveas->setStatusTip(tr("图像另存为"));    act_file_close->setStatusTip(tr("关闭软件"));}void mainwindow::InitImage(){    dockimage = new QDockWidget(tr("图像"), this);    setCentralWidget(dockimage);    imglabel = new QLabel(dockimage);    imglabel->setScaledContents(true);    QImage image = QImage(500, 500, QImage::Format_RGB32);    image.fill(qRgb(255, 255, 255));    imglabel->setPixmap(QPixmap::fromImage(image));    imglabel->resize(image.width(), image.height());    QScrollArea* scrollArea = new QScrollArea(this);    scrollArea->setBackgroundRole(QPalette::Dark);    scrollArea->setAlignment(Qt::AlignCenter);    scrollArea->setWidget(imglabel);    dockimage->setWidget(scrollArea);}void mainwindow::file_new(){    QImage image = QImage(500, 500, QImage::Format_RGB32);    image.fill(qRgb(255, 255, 255));    imglabel->setPixmap(QPixmap::fromImage(image));    imglabel->resize(image.width(), image.height());    currentPath = "";}void mainwindow::file_open(){    QString path = QFileDialog::getOpenFileName(this, tr("选择图像"));    if (!(path.isEmpty()))    {         QImage *img = new QImage();        if (!(img->load(path)))        {            QMessageBox::information(this, tr("错误"), tr("打开图像失败"));            delete img;            return;        }        imglabel->setPixmap(QPixmap::fromImage(*img));        imglabel->resize(img->width(), img->height());        currentPath = path;    }}void mainwindow::file_save() {    if (currentPath.isEmpty())    {        QString path = QFileDialog::getSaveFileName(this, tr("保存图像"), ".", tr("Images(*.jpg *.png *.bmp)"));        if (!path.isEmpty())        {            currentPath = path;        }    }    QImage img = imglabel->pixmap()->toImage();    img.save(currentPath);}void mainwindow::file_saveas(){    QString path = QFileDialog::getSaveFileName(this, tr("图像另存为"), ".", tr("Images(*.jpg *.png *.bmp)"));    if (!path.isEmpty())    {        QImage img = imglabel->pixmap()->toImage();        img.save(path);        currentPath = path;    }}</code></pre><blockquote><p>总结：</p><ul><li><p>qt中每一个窗口就是一个类。</p></li><li><p>关于窗口，<a href="https://blog.csdn.net/rl529014/article/details/51419126" target="_blank" rel="noopener">Qt窗口之QMainWindow、QDialog、QWidget</a>，这篇博文上将的是比较好的。</p></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt-c++学习记录(一)</title>
      <link href="/2019/01/14/qt-c-xue-xi-ji-lu-yi/"/>
      <url>/2019/01/14/qt-c-xue-xi-ji-lu-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="信号槽"><a href="#信号槽" class="headerlink" title="信号槽"></a>信号槽</h1><p><img src="https://github.com/mcc321/mcc/blob/master/img/20.jpg?raw=true" alt="mcc"></p><h1 id="信号与槽"><a href="#信号与槽" class="headerlink" title="信号与槽"></a>信号与槽</h1><blockquote><p>最近参加了一个模仿机器人大赛，要求用qt结合视觉方面实现魔方模式识别，对于自己来说算是比较有挑战性的一次比赛了，除了要重新学习一年级学的c++还要新学qt，再就是补习opencv了，也好久没写视觉代码了，感觉生了许多，博客写的算是一种记录，也当作一种回顾吧。</p></blockquote><pre class=" language-c++"><code class="language-c++">//findDialog.h#pragma once#ifndef findDailog_h#define findDailog_h#include <QDialog>//--------------------------预定义---------------------------class QCheckBox;class QLabel;class QLineEdit;class QPushButton;//qtclass FindDialog :public QDialog{    Q_OBJECTpublic:    FindDialog(QWidget *parent = 0);signals:    void findNext(const QString & str, Qt::CaseSensitivity cs);    void findPrevious(const QString &str, Qt::CaseSensitivity cs);private slots:    void findClicked();    void enableFindButton(const QString &text);private:    QLabel *label;    QLineEdit *lineedit;    QCheckBox *caseCheckBox;    QCheckBox *backforwardCheckBox;    QPushButton *findButton;    QPushButton *closeButton;};#endif</code></pre><pre class=" language-c++"><code class="language-c++">//findDialog.cpp#include "stdafx.h"#include "findDialog.h"#include <QtGui>FindDialog::FindDialog(QWidget * parent)    :QDialog(parent){    label = new QLabel(tr("find and what"));    lineedit = new QLineEdit;    label->setBuddy(lineedit);    caseCheckBox = new QCheckBox(tr("Matching and case"));    backforwardCheckBox = new QCheckBox(tr("send and backward"));    findButton = new QPushButton(tr("find"));    findButton->setDefault(true);    findButton->setEnabled(false);    closeButton = new QPushButton(tr("close"));    connect(lineedit, SIGNAL(textChanged(const Qstring &)), this, SLOT(enableFindButton(const QString &)));    connect(findButton, SIGNAL(clicked()), this, SLOT(findClicked()));    connect(closeButton, SIGNAL(clicked()), this, SLOT(close()));    QHBoxLayout *toplayout = new QHBoxLayout;    toplayout->addWidget(label);    toplayout->addWidget(lineedit);    QVBoxLayout *leftlayout = new QVBoxLayout;    leftlayout->addLayout(toplayout);    leftlayout->addWidget(caseCheckBox);    leftlayout->addWidget(backforwardCheckBox);    QVBoxLayout *rightlayout = new QVBoxLayout;    rightlayout->addWidget(findButton);    rightlayout->addWidget(closeButton);    rightlayout->addStretch();    QHBoxLayout *mainlayout = new QHBoxLayout;    mainlayout->addLayout(leftlayout);    mainlayout->addLayout(rightlayout);    setLayout(mainlayout);    setWindowTitle("mcc");    setFixedHeight(sizeHint().height());}void FindDialog::findClicked(){    QString text = lineedit->text();    Qt::CaseSensitivity cs = caseCheckBox->isChecked() ? Qt::CaseSensitive : Qt::CaseInsensitive;    if (backforwardCheckBox->isChecked())    {        emit findPrevious(text, cs);    }    else    {        emit findNext(text, cs);    }}void FindDialog::enableFindButton(const QString &text){    findButton->setEnabled(!text.isEmpty());}</code></pre><pre class=" language-c++"><code class="language-c++">//main.cpp#include "stdafx.h"#include "book.h"#include <QtWidgets/QApplication>#include "findDialog.h"int main(int argc, char *argv[]){    QApplication a(argc, argv);    //book w;    //w.show();    FindDialog *dialog = new FindDialog;    dialog->show();    return a.exec();}</code></pre><blockquote><p>总结：之所以没有用qt-desingner是因为觉得代码敲的过程也是记忆熟悉qt库的一个过程，当熟练之后再用相应的工具也会更加熟稔，上面的代码是参考一篇博文上敲的，感觉复习了一下c++。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络回顾</title>
      <link href="/2019/01/09/ji-suan-ji-wang-luo-hui-gu/"/>
      <url>/2019/01/09/ji-suan-ji-wang-luo-hui-gu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/5.jpg?raw=true" alt="mcc"></p><h1 id="计算机网络基础回顾"><a href="#计算机网络基础回顾" class="headerlink" title="计算机网络基础回顾"></a>计算机网络基础回顾</h1><blockquote><p>博文参考<a href="https://github.com/taizilongxu/interview_python" target="_blank" rel="noopener">https://github.com/taizilongxu/interview_python</a></p></blockquote><h2 id="1-TCP的三次握手和四次挥手"><a href="#1-TCP的三次握手和四次挥手" class="headerlink" title="1.TCP的三次握手和四次挥手"></a>1.TCP的三次握手和四次挥手</h2><blockquote><h5 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h5><ul><li>客户端发送SYN，并设置连接的序列号为一个随机数a</li><li>服务端回复一个SYN/ACK,ACK的确认码为a+1，同时设置SYN/ACK序列号为另一随机数b</li><li>客户端回复ACK。服务端收到ACK后完成三次握手，进入创建连接状态，并设定包的序列号为a+1,相应设定为b+1</li></ul></blockquote><blockquote><h5 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h5><ul><li>注:中断可以是客户端也可以是服务端</li><li>客户端发送FIN=1，进入FIN-WAIT状态，该状态只接收数据，不发送数据</li><li>服务器端接受FIN=1，发送ACK=1的剩余数据分段，确认客户端FIN信息</li><li>服务端等到所有数据传输完成，向客户端发送FIN=1的数据分段，并进入CLOSE-WAIT,等待客户端发送ACK=1确认报文。</li><li>客户端收到服务端发来的FIN=1报文，返回ACK=1的确认报文，为了防止服务器未收到重发，进入TIME-WAIT状态，服务器接收到报文关闭连接，客户端等待2ms未收到回复则认为关闭成功，客户端关闭连接</li></ul></blockquote><h2 id="2-cookie和session"><a href="#2-cookie和session" class="headerlink" title="2.cookie和session"></a>2.cookie和session</h2><table><thead><tr><th></th><th>Cookie</th><th>Session</th></tr></thead><tbody><tr><td>储存位置</td><td>客户端</td><td>服务器端</td></tr><tr><td>目的</td><td>跟踪会话，也可以保存用户偏好设置或者保存用户名密码等</td><td>跟踪会话</td></tr><tr><td>安全性</td><td>不安全</td><td>安全</td></tr></tbody></table><blockquote><p>session技术是要使用到cookie的，之所以出现session技术，主要是为了安全。</p></blockquote><h2 id="3-常用状态码"><a href="#3-常用状态码" class="headerlink" title="3.常用状态码"></a>3.常用状态码</h2><table><thead><tr><th>状态码</th><th>定义</th></tr></thead><tbody><tr><td>1xx 报告</td><td>接收到请求，继续进程</td></tr><tr><td>2xx 成功</td><td>步骤成功接收，被理解，并被接受</td></tr><tr><td>3xx 重定向</td><td>为了完成请求,必须采取进一步措施</td></tr><tr><td>4xx 客户端出错</td><td>请求包括错的顺序或不能完成</td></tr><tr><td>5xx 服务器出错</td><td>服务器无法完成显然有效的请求</td></tr></tbody></table><h2 id="4-CGI和WSGI"><a href="#4-CGI和WSGI" class="headerlink" title="4.CGI和WSGI"></a>4.CGI和WSGI</h2><blockquote><ul><li><p>CGI是通用网关接口，是连接web服务器和应用程序的接口，用户通过CGI来获取动态数据或文件等。 CGI程序是一个独立的程序，它可以用几乎所有语言来写，包括perl，c，lua，python等等。</p></li><li><p>WSGI, Web Server Gateway Interface，是Python应用程序或框架和Web服务器之间的一种接口，WSGI的其中一个目的就是让用户可以用统一的语言(Python)编写前后端。</p></li></ul></blockquote><h2 id="5-Ajax"><a href="#5-Ajax" class="headerlink" title="5.Ajax"></a>5.Ajax</h2><blockquote><p>AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dian滴</title>
      <link href="/2019/01/06/dian-di/"/>
      <url>/2019/01/06/dian-di/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/17.jpg?raw=true" alt="mcc"></p><h1 id="感动与ok"><a href="#感动与ok" class="headerlink" title="感动与ok"></a>感动与ok</h1><blockquote><video id="video" controls preload="none" width="100%"><br>      <source id="mp4" src type="video/mkv"><br>      <p>Your user agent does not support the HTML5 Video element.</p><br></video></blockquote><p>1.今天考理论力学,在查资料时，看到了一个学姐或是学长整理的笔记，<a href="https://github.com/mcc321/mcc/tree/master/doc" target="_blank" rel="noopener">理论力学课堂笔记</a>,173页全手写，配图也非常的认真，真的觉得真正优秀的人总让人觉得由衷的敬佩，觉得自己与他们之间的差距真的很大，希望自己能调整自己，真正的用心去对待生活中的很多，事无大小，足够耐心，细心许多事应该可以做的更好。</p><p>2.想说一下自己的队友zdw，进入dian一起开始做blog，同他的交往中学到了很多，也感受到了不曾有过的信任，我想这应该是自己的幸运吧，接触到这么优秀的伙伴，从性格，到专注度，再到开发写代码的能力，队友都可以说完胜我，第一次感觉被虐的这么惨，也感觉到切实可感的差距，想想这学期的经理，很惨，被理论力学虐再就是被python虐，有时候总觉得奇怪他为什么能够应付自如，也问过他这个问题，也许这真的是一种天赋，极度专注，也极度的简单。一直以来自己也在追求简单纯粹，任何事要么不做，要么做的足以让人称道，半吊子真的很讨厌。在次谢谢队友吧，从你身上看到了真正的优秀，希望能跟多的合作，共享。</p><p>3.ok，想讲的是希望接下来自己能整理自己的许多方面，一件一件的做，足够专注，做的无愧于心，做的让自己敬佩。</p><p>4.今天想起了自己初中的一个老同学hj，觉得挺怀念的，一直以来都是那种无怨无悔，一直以来也给过自己特别多的支持与帮助，当时真的没觉得什么，但有些事真的是这样，透过时间线去看，愈久弥新，想起姐对我说的许多，真的是这样，想起来，觉得挺好的。</p><p>5.大学的同学的话，觉得班上的一个同学hm真的特别是那种大气有气度的女孩，每次见到我都几乎打过招呼，挺感动的，也觉得一个女孩能做到这样挺难得，也希望她能越走越远。优秀的人，运气不会差。</p><blockquote><p>总结，自己一直以来都在最求简单纯粹，可是也一直以来面对许多事都做不到这一点，太过乱，有时候觉得老师所说的修也许修的是自己的心吧，历平凡事，修平常心，更加简单，更加纯粹。</p></blockquote><video id="video" controls preload="none" width="100%"><br>      <source id="mp4" src="https://mcc3210.oss-ap-southeast-3.aliyuncs.com/film/%E3%80%90%E5%9B%A7%E8%8F%8C%2B%E6%B4%9B%E5%B0%91%E7%88%B7%E3%80%91%E7%B9%81%E5%8D%8E%E5%94%B1%E9%81%8D.FLV" type="video/flv"><br>      <p>Your user agent does not support the HTML5 Video element.</p><br>    </video>]]></content>
      
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于锐捷校园网认证客户端闪退的解决方案</title>
      <link href="/2019/01/05/guan-yu-rui-jie-xiao-yuan-wang-ren-zheng-ke-hu-duan-shan-tui-de-jie-jue-fang-an/"/>
      <url>/2019/01/05/guan-yu-rui-jie-xiao-yuan-wang-ren-zheng-ke-hu-duan-shan-tui-de-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/15.jpg?raw=true" alt="mcc"></p><h1 id="锐捷校园闪退问题解决"><a href="#锐捷校园闪退问题解决" class="headerlink" title="锐捷校园闪退问题解决"></a>锐捷校园闪退问题解决</h1><blockquote><p>最近不知道为什么，校园网认证客户端只要点击认证自动闪退，苦恼了很久，最终还是顺利解决了，分享一下直接将一下解决方法吧，最近还是挺忙的，写这一篇博客也是挺纠结的，不过问题中算是解决了</p></blockquote><p>1.首先安装mentohust网址:<a href="https://github.com/mcc321/mcc/tree/master/app" target="_blank" rel="noopener">我的github</a></p><p>2.接着解压两个文件</p><p>3.以管理员运行MentoHUSTTool.exe，选1安装</p><p>4.进入另一个文件夹，运行MentoHUST.exe，下一步非常重要，点击设置，DHCP选择认证后，之后就ok了。</p><p>5.这里基本上可以连上有线网络了，但是连上后发现网速奇慢和无线网差不多，最后查看连接时的提示信息发现DNS</p><p>是自己配置虚拟机的DNS，因为一些缘故给虚拟机全部配置的静态IP，因此顺带配置了DNS，最后导致了校园网客户端配</p><p>置IP时以此作为首选DNS，网速慢就不奇怪了。解决方法:启用了自动获取IP，避免了有线网将DNS配置成自己配置的</p><p>DNS。</p><blockquote><p>总结:其实为校园网的事还跑去学校的网络中心了，折腾了将近一个小时还是没解决，也看了特别多的教程，最终因为还是想起了很久以前关于校园网部署路由的事才突然想到mentohust的，然后又是尝试不同的设置，最终还是不太顺利解决了，感悟很多，确实许多事还是应该自己先尝试解决吧，不然不仅浪费自己的时间，还会给别人带来麻烦。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 校园网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gcloud初学</title>
      <link href="/2019/01/01/gcloud-chu-xue/"/>
      <url>/2019/01/01/gcloud-chu-xue/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/10.jpg?raw=true" alt="mcc"></p><h2 id="gcloud部署"><a href="#gcloud部署" class="headerlink" title="gcloud部署"></a>gcloud部署</h2><h4 id="为什么要部署gcloud"><a href="#为什么要部署gcloud" class="headerlink" title="为什么要部署gcloud"></a>为什么要部署gcloud</h4><blockquote><p>gcloud可以部署动态网站，是hexo无法比拟的，因此gcloud虽然说麻烦一点，但还是值得试一试</p></blockquote><h4 id="gcloud找不到命令问题"><a href="#gcloud找不到命令问题" class="headerlink" title="gcloud找不到命令问题"></a>gcloud找不到命令问题</h4><blockquote><p>在最初执行gclud命令时没有遇到任何问题，但当装过一些插件之后，gcloud命令执行就出错了，直觉就是环境变量出错了，果然，看过目录结构后才发现不知道为什么安装插件后bi文件夹的目录是变了的，因此，需要改一下环境变量的bin路径就可以了</p></blockquote><h4 id="安装插件app-engine-go出错"><a href="#安装插件app-engine-go出错" class="headerlink" title="安装插件app-engine-go出错"></a>安装插件app-engine-go出错</h4><blockquote><p>其实这个不用太过担心，退出后再执行<code>gcloud components list</code>显示的是正常安装的</p></blockquote><h4 id="执行dev-appserver-py异常"><a href="#执行dev-appserver-py异常" class="headerlink" title="执行dev_appserver.py异常"></a>执行dev_appserver.py异常</h4><blockquote><p>这个也是我遇到的最棘手的问题，今天才算正式解决。</p><p>问题是当每次执行<code>dev_appserver.py + 项目名</code>时编辑器都会自动弹窗打开dev_appserver.py，windows实在是太菜了，后来刚开始出现这个问题时有点束手无措，今天才向想到改默认执行程序。下面是我解决的过程。</p><p><img src="https://github.com/mcc321/mcc/blob/master/img/Inkedgcloud1_LI.jpg?raw=true" alt="mcc"></p><p><img src="https://github.com/mcc321/mcc/blob/master/img/Inkedgcloud2_LI.jpg?raw=true" alt="mcc"></p><p><img src="https://github.com/mcc321/mcc/blob/master/img/Inkedgcloud3_LI.jpg?raw=true" alt="mcc"></p></blockquote><p>简单来说改一下执行程序就行了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>从部署的各种折腾踩坑中还是学到了很多的，感觉很多事都是这样的，不吝惜自己的时间，放在自己喜欢的事情上，还是会有许多收获的</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> gcloud </tag>
            
            <tag> dev_appserver.py </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python re-study</title>
      <link href="/2018/12/26/python-re-study/"/>
      <url>/2018/12/26/python-re-study/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/10.jpg?raw=true" alt="mcc"></p><h1 id="python进阶"><a href="#python进阶" class="headerlink" title="python进阶"></a>python进阶</h1><blockquote><p>博文参考<a href="https://github.com/taizilongxu/interview_python" target="_blank" rel="noopener">https://github.com/taizilongxu/interview_python</a></p></blockquote><blockquote><p>其实一直想写这个话题，但是因为一些其他的事真的感觉有些力不从心，所以一直以来都拖延了，今天算是正式的记录。</p></blockquote><h2 id="1-关于类方法在-staticmethod和-classmethod"><a href="#1-关于类方法在-staticmethod和-classmethod" class="headerlink" title="1.关于类方法在@staticmethod和@classmethod"></a>1.关于类方法在@staticmethod和@classmethod</h2><blockquote><p>首先关于python类方法可分为普通函数，类函数，静态函数</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"func(%s,%s)"</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">class_func</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"class_func(%s,%s)"</span><span class="token operator">%</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span>x<span class="token punctuation">)</span>        cls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                            <span class="token comment" spellcheck="true">#这里需要注意不同于self调用，需要加上()</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">static_func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"static_func(%s)"</span><span class="token operator">%</span>x   a<span class="token operator">=</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>首先关于self和cls不是必须写这两个关键词，只不过是一种一般都约定的写法，看了特别多的博文，总结一点，类方法和静态方法额区别在于类方法可以调用类的函数以及变量，但静态方法不能，而类方法，静态方法和普通方法的区别是可以直接两种方式访问承接上面的代码</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#func调用</span>A<span class="token punctuation">.</span>func<span class="token punctuation">(</span>a<span class="token punctuation">)</span>a<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#class_func调用</span>A<span class="token punctuation">.</span>class_func<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>class_func<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#static_func调用</span>A<span class="token punctuation">.</span>static_func<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>static_func<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span></code></pre><h2 id="2-关于python3中-new-与-init-方法"><a href="#2-关于python3中-new-与-init-方法" class="headerlink" title="2.关于python3中__new\___与__init__方法"></a>2.关于python3中__<em>new\</em>___与__init__方法</h2><p>这里参考了一篇博客<a href="https://blog.csdn.net/phantom_dapeng/article/details/80008760" target="_blank" rel="noopener">https://blog.csdn.net/phantom_dapeng/article/details/80008760</a></p><blockquote><p>简单来说__new__主要是创建一个实例对象(静态方法，即使不加修饰器)，__init__是添加附加属性(只不过大多时候我们将创建s实例直接放在了__init__里了)</p></blockquote><p>python3中__new__和__init__方法与python2有些不同，下面以单实例对象创建为例详细说一下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#python2</span><span class="token comment" spellcheck="true">#----------------------------------------方法1---------------------------------------------------</span><span class="token keyword">class</span> <span class="token class-name">PEN</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>cls<span class="token punctuation">,</span><span class="token string">'_instance'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      cls<span class="token punctuation">.</span>_instance<span class="token operator">=</span>super<span class="token punctuation">(</span>PEN<span class="token punctuation">,</span>cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instancepen<span class="token operator">=</span>PEN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#----------------------------------------方法2---------------------------------------------------</span><span class="token keyword">class</span> <span class="token class-name">PEN</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>  _stat<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    ob<span class="token operator">=</span>super<span class="token punctuation">(</span>PEN<span class="token punctuation">,</span>cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    ob<span class="token punctuation">.</span>__dict__<span class="token operator">=</span>ob<span class="token punctuation">.</span>_stat<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> obpen<span class="token operator">=</span>PEN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#python3</span><span class="token comment" spellcheck="true">#----------------------------------------方法1---------------------------------------------------</span><span class="token keyword">class</span> <span class="token class-name">PEN</span><span class="token punctuation">:</span>  __obj<span class="token operator">=</span>None  <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> cls<span class="token punctuation">.</span>__obj <span class="token keyword">is</span> None<span class="token punctuation">:</span>      cls<span class="token punctuation">.</span>__obj<span class="token operator">=</span>super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>     <span class="token keyword">return</span> cls<span class="token punctuation">.</span>__objpen<span class="token operator">=</span>PEN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#----------------------------------------方法2---------------------------------------------------</span><span class="token keyword">class</span> <span class="token class-name">PEN</span><span class="token punctuation">:</span>  __obj<span class="token operator">=</span>None  @classmethod  <span class="token keyword">def</span> <span class="token function">get_instance</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> cls<span class="token punctuation">.</span>__obj <span class="token keyword">is</span> None<span class="token punctuation">:</span>      cls<span class="token punctuation">.</span>__obj<span class="token operator">=</span>super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>     <span class="token keyword">return</span> cls<span class="token punctuation">.</span>__objpen<span class="token operator">=</span>PEN<span class="token punctuation">.</span>get_instance<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#----------------------------------------方法3---------------------------------------------------</span><span class="token comment" spellcheck="true">#----------------------------------------修饰器--------------------------------------------------</span><span class="token keyword">def</span> <span class="token function">single_class</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>  instance<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">def</span> <span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> cls <span class="token operator">not</span> <span class="token keyword">in</span> instance<span class="token punctuation">:</span>      instance<span class="token punctuation">[</span>cls<span class="token punctuation">]</span><span class="token operator">=</span>cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>      <span class="token keyword">return</span> instance<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>    <span class="token keyword">return</span> get_instance@single_class<span class="token keyword">class</span> <span class="token class-name">PEN</span><span class="token punctuation">:</span>  <span class="token keyword">pass</span>pen<span class="token operator">=</span>PEN<span class="token punctuation">(</span><span class="token punctuation">)</span>  </code></pre><blockquote><p>总结:</p><ul><li><p>__init__不能有返回值</p></li><li><p>__new__可以返回其它类实例</p></li><li><p>只有__new__返回当前对象的实例时__init__才会被调用</p></li></ul></blockquote><h2 id="3-闭包和修饰器"><a href="#3-闭包和修饰器" class="headerlink" title="3.闭包和修饰器"></a>3.闭包和修饰器</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 闭包 (封装函数) </span><span class="token keyword">def</span> <span class="token function">wrap</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">wrap2</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">:</span>    fun<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修饰器 (封装类)</span><span class="token keyword">def</span> <span class="token function">wrap</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">wrap2</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    start<span class="token operator">=</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    instance<span class="token operator">=</span>cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    end<span class="token operator">=</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span>    <span class="token keyword">return</span> instance  <span class="token keyword">return</span> wrap2</code></pre><h2 id="4-lamda表达式"><a href="#4-lamda表达式" class="headerlink" title="4.lamda表达式"></a>4.lamda表达式</h2><pre class=" language-python"><code class="language-python">fun<span class="token operator">=</span>lamda x<span class="token punctuation">:</span>x<span class="token operator">**</span><span class="token number">2</span>fun<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#返回4</span></code></pre><h2 id="5-推导式-生成器"><a href="#5-推导式-生成器" class="headerlink" title="5.推导式,生成器"></a>5.推导式,生成器</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 推导式</span>dic<span class="token operator">=</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span>value <span class="token keyword">for</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token keyword">in</span> interable<span class="token punctuation">}</span>tup<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arr<span class="token operator">=</span><span class="token punctuation">[</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 生成器</span><span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">:</span>      result<span class="token operator">=</span>x<span class="token operator">**</span><span class="token number">2</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      result<span class="token operator">=</span>x<span class="token operator">**</span><span class="token number">3</span>    <span class="token keyword">yield</span> result<span class="token comment" spellcheck="true">#这里再贴一个生成器，是linux的tail命令</span><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">tail</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#移动到文件EOF</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        line <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#读取文件中新的文本行</span>        <span class="token keyword">if</span> <span class="token operator">not</span> line<span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">yield</span> line<span class="token keyword">def</span> <span class="token function">grep</span><span class="token punctuation">(</span>lines<span class="token punctuation">,</span>searchtext<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        <span class="token keyword">if</span> searchtext <span class="token keyword">in</span> line<span class="token punctuation">:</span>            <span class="token keyword">yield</span> lineflog <span class="token operator">=</span> tail<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">'warn.log'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pylines <span class="token operator">=</span> grep<span class="token punctuation">(</span>flog<span class="token punctuation">,</span><span class="token string">'python'</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> pylines<span class="token punctuation">:</span>    <span class="token keyword">print</span> line<span class="token comment" spellcheck="true">#再介绍一个跟高阶的</span><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  a<span class="token operator">=</span>b<span class="token operator">=</span><span class="token number">1</span>  <span class="token keyword">yield</span> a  <span class="token keyword">yield</span> b  <span class="token keyword">while</span> true<span class="token punctuation">:</span>    a<span class="token punctuation">,</span>b<span class="token operator">=</span>b<span class="token punctuation">,</span>a<span class="token operator">+</span>b    <span class="token keyword">yield</span> b</code></pre><h2 id="6-Python单双下划线"><a href="#6-Python单双下划线" class="headerlink" title="6.Python单双下划线"></a>6.Python单双下划线</h2><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             self<span class="token punctuation">.</span>__superprivate <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             self<span class="token punctuation">.</span>_semiprivate <span class="token operator">=</span> <span class="token string">", world!"</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> mc <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span> mc<span class="token punctuation">.</span>__superprivateTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>AttributeError<span class="token punctuation">:</span> myClass instance has no attribute <span class="token string">'__superprivate'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span> mc<span class="token punctuation">.</span>_semiprivate<span class="token punctuation">,</span> world!<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span> mc<span class="token punctuation">.</span>__dict__<span class="token punctuation">{</span><span class="token string">'_MyClass__superprivate'</span><span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'_semiprivate'</span><span class="token punctuation">:</span> <span class="token string">', world!'</span><span class="token punctuation">}</span></code></pre><p><code>__foo__</code>:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如<code>__init__()</code>,<code>__del__()</code>,<code>__call__()</code>这些特殊方法</p><p><code>_foo</code>:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；</p><p><code>__foo</code>:这个有真正的意义:解析器用<code>_classname__foo</code>来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,通过<code>对象名._类名__xxx(以上图为例就是mc._MyClass__superprivate)</code>这样的方式可以访问.</p><h2 id="7-深浅拷贝"><a href="#7-深浅拷贝" class="headerlink" title="7.深浅拷贝"></a>7.深浅拷贝</h2><pre class=" language-py"><code class="language-py">## map使用a=map(lambda x:x**2,[1,2,3])b=list(a)print(b)## 深浅拷贝import copy a=[1,2,3,['a','b']]b=ac=copy.copy(a)d=copy.deepcopy(a)a.append(4)a[3].append('c')print('a=',a)print('b=',b)print('c=',c)print('d=',d)</code></pre><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><pre class=" language-py"><code class="language-py">## mcc.csv文件1,23,45,67,89,10## 读取mcc.csv文件a=[]with open('mcc.csv','r') as csv:    f=csv.readlines()    for line in f:        a.append(line.strip().split(','))print(a)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>api钩取</title>
      <link href="/2018/12/24/api-gou-qu/"/>
      <url>/2018/12/24/api-gou-qu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/13.jpg?raw=true" alt="mcc"></p><h1 id="入门pydbg"><a href="#入门pydbg" class="headerlink" title="# 入门pydbg"></a># 入门pydbg</h1><blockquote><p>今天学算是学习pydbg的第二天了吧，这个库确实有太多值得自己学的，像想在接下来的一段时间里认真的学习一下</p></blockquote><p>首先是消息钩取的一个小的程序</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes<span class="token punctuation">.</span>wintypes <span class="token keyword">import</span> MSG <span class="token punctuation">,</span> DWORD<span class="token keyword">import</span> pydasm<span class="token keyword">import</span> pydbguser32<span class="token operator">=</span>windll<span class="token punctuation">.</span>user32kernel32<span class="token operator">=</span>windll<span class="token punctuation">.</span>kernel32WH_KEYBOARD_LL<span class="token operator">=</span><span class="token number">13</span>WM_KEYDOWN<span class="token operator">=</span><span class="token number">0X0100</span>CTRL_CODE<span class="token operator">=</span><span class="token number">162</span><span class="token keyword">class</span> <span class="token class-name">KeyLogger</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>lUser32 <span class="token operator">=</span> user32        self<span class="token punctuation">.</span>hooked <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">installHookProc</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>pointer<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>hooked<span class="token operator">=</span>self<span class="token punctuation">.</span>lUser32<span class="token punctuation">.</span>SetWindowsHookExA<span class="token punctuation">(</span>WH_KEYBOARD_LL<span class="token punctuation">,</span>pointer<span class="token punctuation">,</span>kernel32<span class="token punctuation">.</span>GetModuleHandleW<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>hooked<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">uninstallHookProc</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>hooked <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span>         self<span class="token punctuation">.</span>lUser32<span class="token punctuation">.</span>UnhookWindowsHookEx<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hooked<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hooked<span class="token operator">=</span>None<span class="token keyword">def</span> <span class="token function">getFPTR</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>    CMPFUNC<span class="token operator">=</span>CFUNCTYPE<span class="token punctuation">(</span>c_int<span class="token punctuation">,</span>c_int<span class="token punctuation">,</span>c_int<span class="token punctuation">,</span>c_void_p<span class="token punctuation">)</span>    <span class="token keyword">return</span> CMPFUNC<span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hookProc</span><span class="token punctuation">(</span>nCode<span class="token punctuation">,</span>wParam<span class="token punctuation">,</span>lParam<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> wParam <span class="token keyword">is</span> <span class="token operator">not</span> WM_KEYDOWN<span class="token punctuation">:</span>        <span class="token keyword">return</span> user32<span class="token punctuation">.</span>CallNextHookEx<span class="token punctuation">(</span>KeyLogger<span class="token punctuation">.</span>hooked<span class="token punctuation">,</span>nCode<span class="token punctuation">,</span>wParam<span class="token punctuation">,</span>lParam<span class="token punctuation">)</span>    hookedKey<span class="token operator">=</span>chr<span class="token punctuation">(</span>lParam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>hookedKey<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>CTRL_CODE<span class="token operator">==</span>int<span class="token punctuation">(</span>lParam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'CTRL presses,call uninstallHook()'</span><span class="token punctuation">)</span>        KeyLogger<span class="token punctuation">.</span>uninstallHookProc<span class="token punctuation">(</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> user32<span class="token punctuation">.</span>CallNextHookEx<span class="token punctuation">(</span>KeyLogger<span class="token punctuation">.</span>hooked<span class="token punctuation">,</span>nCode<span class="token punctuation">,</span>wParam<span class="token punctuation">,</span>lParam<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">startKeyLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    msg<span class="token operator">=</span>MSG<span class="token punctuation">(</span><span class="token punctuation">)</span>    user32<span class="token punctuation">.</span>GetMessageA<span class="token punctuation">(</span>byref<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>keyLogger<span class="token operator">=</span>KeyLogger<span class="token punctuation">(</span><span class="token punctuation">)</span>pointer<span class="token operator">=</span>getFPTR<span class="token punctuation">(</span>hookProc<span class="token punctuation">)</span><span class="token keyword">if</span> keyLogger<span class="token punctuation">.</span>installHookProc<span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'installed keyLogger'</span><span class="token punctuation">)</span>startKeyLog<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这个程序测试了一下程序</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pydbg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask学习总结</title>
      <link href="/2018/12/22/flask-xue-xi-yi/"/>
      <url>/2018/12/22/flask-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/3.jpg?raw=true" alt="mcc"></p><h1 id="blueprint框架介绍"><a href="#blueprint框架介绍" class="headerlink" title="blueprint框架介绍"></a>blueprint框架介绍</h1><p>前段时间一直在做后台开发，现在已经基本上完成了博客框架的搭建，现在想写下flask开发中的一些过程吧。</p><p>首先想说一下为什么从蓝图框架开始介绍。其实刚开始也是将所有的路由放在了一个文件里，后来因为开发中对独立开发的要求还有模型变得复杂，便逐渐转向使用蓝图框架。蓝图框架迁移的过程我是深有体会的，就有一些问题自己花了几天的时间才解决，所以我觉得首先介绍一下蓝图框架。</p><p><img src="https://github.com/mcc321/mcc/blob/master/img/tree.png?raw=true" alt="mcc"></p><blockquote><p>首先贴一下开发的目录结构</p><ul><li><p>__pycache__:是一个编译文件，不用太过在意</p><blockquote><ul><li><p>app:这是说有路由的根目录</p><blockquote><blockquote><ul><li>doc:文档介绍相关，其实如果仅仅是个人开发不用doc<blockquote><blockquote><blockquote><blockquote><ul><li>env:这是虚拟环境通过virtualenv命令生成，需要事先通过pip安装virtualenv</li><li>manage.py是运行整个博客网站的接口文件</li><li>requirements.txt:这是一个通过pip freeze &gt;requirements.txt命令生成的,我试过用echo<code>pip list</code> &gt;requirements.txt 生成，但通过pip install -r requirements.txt 安装拓展包时出错了，因此还是用pip freeze吧，这里还有一点建议，不要安装太冷门的包，不然他人安装起来容易出错，我就尝试安装过一个mysql-connector==2.1.6和mysql-connector-python==8.0.13这两个包，当初我也是查看各种博客才装上的，也导致小伙伴花费了一段时间装这个库，感觉还是有点抱歉。</li><li>templates不用太在意</li><li>test:集成测试模块，现在还没加入</li><li>blog.md:上面的乱码是utf-8编码出了一点问题，关于编码encoding和字符集charset是有区别的，charset代表一个字符集合，如汉语字符集，而编码代表的是如何将每个符号用计算机的0,1表示出来，我记忆中字符集有Unicode，ASCII，GBK，ISO-8859-n，BIG5，GB2312，GB18030</li></ul></blockquote></blockquote></blockquote></blockquote></li></ul></blockquote></blockquote></li></ul></blockquote></li></ul></blockquote><p>而蓝图框架主要是在app里面</p><blockquote><p>这里还是我想从外层向里层介绍</p></blockquote><h2 id="manage-py解析"><a href="#manage-py解析" class="headerlink" title="manage.py解析"></a>manage.py解析</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os <span class="token keyword">from</span> app <span class="token keyword">import</span> create_app <span class="token punctuation">,</span> db<span class="token keyword">from</span> app<span class="token punctuation">.</span>models <span class="token keyword">import</span> User <span class="token punctuation">,</span> Article <span class="token punctuation">,</span> Comment <span class="token punctuation">,</span> Role <span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager <span class="token punctuation">,</span> Shell<span class="token keyword">from</span> flask_migrate <span class="token keyword">import</span> Migrate <span class="token punctuation">,</span> MigrateCommand<span class="token keyword">from</span> flask <span class="token keyword">import</span> redirect<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>render_templateapp <span class="token operator">=</span> create_app<span class="token punctuation">(</span><span class="token punctuation">)</span>manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span>migrate <span class="token operator">=</span> Migrate<span class="token punctuation">(</span>app<span class="token punctuation">,</span>db<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">make_shell_context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> dict<span class="token punctuation">(</span>app <span class="token operator">=</span> app <span class="token punctuation">,</span> db <span class="token operator">=</span> db <span class="token punctuation">,</span> User <span class="token operator">=</span> User <span class="token punctuation">,</span> Role<span class="token operator">=</span>Role <span class="token punctuation">,</span>  Article <span class="token operator">=</span> Article <span class="token punctuation">,</span> Comment<span class="token operator">=</span>Comment<span class="token punctuation">)</span>manager<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">'shell'</span><span class="token punctuation">,</span> Shell<span class="token punctuation">(</span>make_context<span class="token operator">=</span>make_shell_context<span class="token punctuation">)</span><span class="token punctuation">)</span>manager<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">'db'</span><span class="token punctuation">,</span>MigrateCommand<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">root_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/&lt;path:path>'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">any_root_path</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>这里首先需要注意的是python路径应用的问题，这里确实算一个比较大的坑，我也花费了几天时间才解决引用问题</p><ul><li><p>引用问题首先是路径问题:这里像说明一下包和模块的问题，上面的auth和main都是包，最明显的包是app包，一个包包含__init__文件，这个文件可以为空，可以当作包的一个标识文件，没有就不是包，包引用时即<code>import 包名</code>时import的是__init__文件，如需要使用<code>from 包名 import *</code>，者需要在__init__文件添加<code>__all__ = []</code>语句，这就是引用包，自己编写的包一般又相对路径引用，如<code>from ..auth.func import *</code>，这里我采用的就是相对路径引用</p></li><li><p>引用的第二个问题就是循环引用的问题，这个问题很多人都听说过，但如果没有接触过真正的复杂project其实很难碰到这种问题。所以我想仔细地讲一下</p><blockquote><p>首先python包的引用是逐句引用，举个例子:</p></blockquote><p>这里我有同意文件夹下有a.py，b.py，c.py三个文件</p><pre class=" language-pyt"><code class="language-pyt">#a.pyimport osimport reimport flaskfrom b import *...</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#b.py</span><span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">import</span> flask<span class="token keyword">from</span> c <span class="token keyword">import</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#c.py</span><span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">import</span> flask<span class="token keyword">from</span> a <span class="token keyword">import</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><ul><li>上面的引用就是循环引用最直接的形式了，当a.py去引用b.py时时它其实时没有完全初始化的，并不能被引用，此时b引用c文件时b也没有初始化，c再引用a时就会出现无法import的情况。</li></ul></li></ul></blockquote><h2 id="app包解析"><a href="#app包解析" class="headerlink" title="app包解析"></a>app包解析</h2><h4 id="1-env"><a href="#1-env" class="headerlink" title="1.env"></a>1.env</h4><blockquote><p>这是一个虚拟环境，刚开始使用可能不太顺利，但当你真正用过两三次之后就会发现开发什么项目都会想都相机那里一个虚拟环境，这是我的体会，所以多虚拟环境还是比较重要的，不然你安装的许多库都会安装到服务器上，导致服务器的性能下降。</p></blockquote><h4 id="2-instance和config"><a href="#2-instance和config" class="headerlink" title="2.instance和config"></a>2.instance和config</h4><blockquote><p>这两个文件是配置文件，instance文件主要是存放隐私配置，如密码之类的信息，而config则存放通用配置</p></blockquote><h4 id="3-models-py"><a href="#3-models-py" class="headerlink" title="3.models.py"></a>3.models.py</h4><blockquote><p>这个模块主要是存放各种模型，比如说User，Article以及一些数据库表</p></blockquote><h4 id="4-utils-py"><a href="#4-utils-py" class="headerlink" title="4.utils.py"></a>4.utils.py</h4><blockquote><p>主要定义一些修饰器</p></blockquote><h4 id="5-init-py"><a href="#5-init-py" class="headerlink" title="5__init__.py"></a>5__init__.py</h4><blockquote><p>这是包的一个标置文件，可以为空</p></blockquote><h4 id="6-func-py"><a href="#6-func-py" class="headerlink" title="6.func.py"></a>6.func.py</h4><blockquote><p>这是通用函数存放的地方，可以供模块间共享</p></blockquote><h4 id="7-main-py"><a href="#7-main-py" class="headerlink" title="7.main.py"></a>7.main.py</h4><blockquote><p>这是主路由模块，是一个main的蓝图，大多数的路由在这里开发</p></blockquote><h4 id="8-auth-py"><a href="#8-auth-py" class="headerlink" title="8.auth.py"></a>8.auth.py</h4><blockquote><p>这是认证模块，存放注册，登陆等路由</p></blockquote><p>整体的介绍就这么多，我觉得开发过程中尽管会报各种各样的错，但是还是又特别多的自由的，你可以编写自己的装饰器，函数，甚至重定义很多自带的装饰器，里面会有很多乐趣。蓝图框架初看起来特别复杂，但如果稍微对包有一点了解都会很容易的接受的，因为相较于其他项目而言，确实特别简单，学了这么多天的蓝图，感觉蓝图就是一种可插拔的框架，分离各个模块，要什么模块添加即可，想删改什么模块也不用考虑依赖问题，简洁，干净。</p><h2 id="路由模块"><a href="#路由模块" class="headerlink" title="路由模块"></a>路由模块</h2><h2 id="部署-ubuntu16-04-uwsgi-nginx"><a href="#部署-ubuntu16-04-uwsgi-nginx" class="headerlink" title="部署(ubuntu16.04 uwsgi nginx)"></a>部署(ubuntu16.04 uwsgi nginx)</h2><p>部署中首先是安装环境</p><pre class=" language-python"><code class="language-python">pip install virtualenpip install <span class="token operator">-</span>r requirement<span class="token punctuation">.</span>txt</code></pre><p>这里顺便一段，可以通过<code>pip freeze &gt;requirement.txt</code> 生成requirement.txt</p><blockquote><p>再通过pip安装时，可能数据库安装会出现一些问题，如遇到报错：</p><pre class=" language-python"><code class="language-python">Downloading<span class="token operator">/</span>unpacking MySQL<span class="token operator">-</span>python  Running setup<span class="token punctuation">.</span>py egg_info <span class="token keyword">for</span> package MySQL<span class="token operator">-</span>python    Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>      File <span class="token string">"&lt;string>"</span><span class="token punctuation">,</span> line <span class="token number">16</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>      File <span class="token string">"/var/folders/lf/myf7bjr57_jg7_5c4014bh640000gn/T/pip-build/MySQL-python/setup.py"</span><span class="token punctuation">,</span> line <span class="token number">14</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>        <span class="token keyword">from</span> setup_posix <span class="token keyword">import</span> get_config      File <span class="token string">"./setup_posix.py"</span><span class="token punctuation">,</span> line <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>        <span class="token keyword">from</span> ConfigParser <span class="token keyword">import</span> SafeConfigParser    ImportError<span class="token punctuation">:</span> No module named <span class="token string">'ConfigParser'</span>    Complete output <span class="token keyword">from</span> command python setup<span class="token punctuation">.</span>py egg_info<span class="token punctuation">:</span>    Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;string>"</span><span class="token punctuation">,</span> line <span class="token number">16</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>  File <span class="token string">"/var/folders/lf/myf7bjr57_jg7_5c4014bh640000gn/T/pip-build/MySQL-python/setup.py"</span><span class="token punctuation">,</span> line <span class="token number">14</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">from</span> setup_posix <span class="token keyword">import</span> get_config  File <span class="token string">"./setup_posix.py"</span><span class="token punctuation">,</span> line <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">from</span> ConfigParser <span class="token keyword">import</span> SafeConfigParserImportError<span class="token punctuation">:</span> No module named <span class="token string">'ConfigParser'</span></code></pre><p>解决办法：</p><pre class=" language-python"><code class="language-python">pip install configparsersudo cp <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>python3<span class="token number">.6</span><span class="token operator">/</span>configparser<span class="token punctuation">.</span>py <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>python3<span class="token number">.6</span><span class="token operator">/</span>ConfigParser<span class="token punctuation">.</span>py`</code></pre></blockquote><p>如果没有其他意外，其它包的安装应该不会出现问题</p><p>接下来就是正式部署了可以参考一篇博文：<a href="https://stackoverflow.com/questions/14087598/python-3-importerror-no-module-named-configparser" target="_blank" rel="noopener">https://stackoverflow.com/questions/14087598/python-3-importerror-no-module-named-configparser</a></p><p>博客的一版就算成功了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> 后台 </tag>
            
            <tag> 蓝图框架(blueprint) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown数学公式语法</title>
      <link href="/2018/12/22/markdown-shu-xue-gong-shi-yu-fa/"/>
      <url>/2018/12/22/markdown-shu-xue-gong-shi-yu-fa/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/8.jpg?raw=true" alt="mcc"></p><h1 id="Markdown-latex-语法整理"><a href="#Markdown-latex-语法整理" class="headerlink" title="Markdown latex 语法整理"></a>Markdown latex 语法整理</h1><h2 id="LaTex语法"><a href="#LaTex语法" class="headerlink" title="LaTex语法"></a>LaTex语法</h2><h2 id="行内与独行"><a href="#行内与独行" class="headerlink" title="行内与独行"></a>行内与独行</h2><ol><li>行内公式：将公式插入到本行内，符号：<code>$公式内容$</code>，如：$xyz$</li><li>独行公式：将公式插入到新的一行内，并且居中，符号：<code>$$公式内容$$</code>，如：$$xyz$$</li></ol><h2 id="上标、下标与组合"><a href="#上标、下标与组合" class="headerlink" title="上标、下标与组合"></a>上标、下标与组合</h2><ol><li>上标符号，符号：<code>^</code>，如：$x^4$</li><li>下标符号，符号：<code>_</code>，如：$x_1$</li><li>组合符号，符号：<code>{}</code>，如：${16}<em>{8}O{2+}</em>{2}$</li></ol><h2 id="汉字、字体与格式"><a href="#汉字、字体与格式" class="headerlink" title="汉字、字体与格式"></a>汉字、字体与格式</h2><ol><li>汉字形式，符号：<code>\mbox{}</code>，如：$V_{\mbox{初始}}$</li><li>字体控制，符号：<code>\displaystyle</code>，如：$\displaystyle \frac{x+y}{y+z}$</li><li>下划线符号，符号：<code>\underline</code>，如：$\underline{x+y}$</li><li>标签，符号<code>\tag{数字}</code>，如：$\tag{11}$</li><li>上大括号，符号：<code>\overbrace{算式}</code>，如：$\overbrace{a+b+c+d}^{2.0}$</li><li>下大括号，符号：<code>\underbrace{算式}</code>，如：$a+\underbrace{b+c}_{1.0}+d$</li><li>上位符号，符号：<code>\stacrel{上位符号}{基位符号}</code>，如：$\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}$</li></ol><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><ol><li>两个quad空格，符号：<code>\qquad</code>，如：$x \qquad y$</li><li>quad空格，符号：<code>\quad</code>，如：$x \quad y$</li><li>大空格，符号<code>\</code>，如：$x \  y$</li><li>中空格，符号<code>\:</code>，如：$x : y$</li><li>小空格，符号<code>\,</code>，如：$x , y$</li><li>没有空格，符号<code></code>，如：$xy$</li><li>紧贴，符号<code>\!</code>，如：$x ! y$</li></ol><h2 id="定界符与组合"><a href="#定界符与组合" class="headerlink" title="定界符与组合"></a>定界符与组合</h2><ol><li>括号，符号：<code>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</code>，如：$（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)$</li><li>中括号，符号：<code>[]</code>，如：$[x+y]$</li><li>大括号，符号：<code>\{ \}</code>，如：${x+y}$</li><li>自适应括号，符号：<code>\left \right</code>，如：$\left(x\right)$，$\left(x{yz}\right)$</li><li>组合公式，符号：<code>{上位公式 \choose 下位公式}</code>，如：${n+1 \choose k}={n \choose k}+{n \choose k-1}$</li><li>组合公式，符号：<code>{上位公式 \atop 下位公式}</code>，如：$\sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A_{k_0}A_{k_1}\cdots$</li></ol><h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><ol><li>加法运算，符号：<code>+</code>，如：$x+y=z$</li><li>减法运算，符号：<code>-</code>，如：$x-y=z$</li><li>加减运算，符号：<code>\pm</code>，如：$x \pm y=z$</li><li>减甲运算，符号：<code>\mp</code>，如：$x \mp y=z$</li><li>乘法运算，符号：<code>\times</code>，如：$x \times y=z$</li><li>点乘运算，符号：<code>\cdot</code>，如：$x \cdot y=z$</li><li>星乘运算，符号：<code>\ast</code>，如：$x \ast y=z$</li><li>除法运算，符号：<code>\div</code>，如：$x \div y=z$</li><li>斜法运算，符号：<code>/</code>，如：$x/y=z$</li><li>分式表示，符号：<code>\frac{分子}{分母}</code>，如：$\frac{x+y}{y+z}$</li><li>分式表示，符号：<code>{分子} \voer {分母}</code>，如：${x+y} \over {y+z}$</li><li>绝对值表示，符号：<code>||</code>，如：$|x+y|$</li></ol><h2 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h2><ol><li>平均数运算，符号：<code>\overline{算式}</code>，如：$\overline{xyz}$</li><li>开二次方运算，符号：<code>\sqrt</code>，如：$\sqrt x$</li><li>开方运算，符号：<code>\sqrt[开方数]{被开方数}</code>，如：$\sqrt[3]{x+y}$</li><li>对数运算，符号：<code>\log</code>，如：$\log(x)$</li><li>极限运算，符号：<code>\lim</code>，如：$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>极限运算，符号：<code>\displaystyle \lim</code>，如：$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>求和运算，符号：<code>\sum</code>，如：$\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>求和运算，符号：<code>\displaystyle \sum</code>，如：$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>积分运算，符号：<code>\int</code>，如：$\int^{\infty}_{0}{xdx}$</li><li>积分运算，符号：<code>\displaystyle \int</code>，如：$\displaystyle \int^{\infty}_{0}{xdx}$</li><li>微分运算，符号：<code>\partial</code>，如：$\frac{\partial x}{\partial y}$</li><li>矩阵表示，符号：<code>\begin{matrix} \end{matrix}</code>，如：$\left[ \begin{matrix} 1 &amp;2 &amp;\cdots &amp;4\5 &amp;6 &amp;\cdots &amp;8\vdots &amp;\vdots &amp;\ddots &amp;\vdots\13 &amp;14 &amp;\cdots &amp;16\end{matrix} \right]$</li></ol><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><ol><li>等于运算，符号：<code>=</code>，如：$x+y=z$</li><li>大于运算，符号：<code>&gt;</code>，如：$x+y&gt;z$</li><li>小于运算，符号：<code>&lt;</code>，如：$x+y&lt;z$</li><li>大于等于运算，符号：<code>\geq</code>，如：$x+y \geq z$</li><li>小于等于运算，符号：<code>\leq</code>，如：$x+y \leq z$</li><li>不等于运算，符号：<code>\neq</code>，如：$x+y \neq z$</li><li>不大于等于运算，符号：<code>\ngeq</code>，如：$x+y \ngeq z$</li><li>不大于等于运算，符号：<code>\not\geq</code>，如：$x+y \not\geq z$</li><li>不小于等于运算，符号：<code>\nleq</code>，如：$x+y \nleq z$</li><li>不小于等于运算，符号：<code>\not\leq</code>，如：$x+y \not\leq z$</li><li>约等于运算，符号：<code>\approx</code>，如：$x+y \approx z$</li><li>恒定等于运算，符号：<code>\equiv</code>，如：$x+y \equiv z$</li></ol><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><ol><li>属于运算，符号：<code>\in</code>，如：$x \in y$</li><li>不属于运算，符号：<code>\notin</code>，如：$x \notin y$</li><li>不属于运算，符号：<code>\not\in</code>，如：$x \not\in y$</li><li>子集运算，符号：<code>\subset</code>，如：$x \subset y$</li><li>子集运算，符号：<code>\supset</code>，如：$x \supset y$</li><li>真子集运算，符号：<code>\subseteq</code>，如：$x \subseteq y$</li><li>非真子集运算，符号：<code>\subsetneq</code>，如：$x \subsetneq y$</li><li>真子集运算，符号：<code>\supseteq</code>，如：$x \supseteq y$</li><li>非真子集运算，符号：<code>\supsetneq</code>，如：$x \supsetneq y$</li><li>非子集运算，符号：<code>\not\subset</code>，如：$x \not\subset y$</li><li>非子集运算，符号：<code>\not\supset</code>，如：$x \not\supset y$</li><li>并集运算，符号：<code>\cup</code>，如：$x \cup y$</li><li>交集运算，符号：<code>\cap</code>，如：$x \cap y$</li><li>差集运算，符号：<code>\setminus</code>，如：$x \setminus y$</li><li>同或运算，符号：<code>\bigodot</code>，如：$x \bigodot y$</li><li>同与运算，符号：<code>\bigotimes</code>，如：$x \bigotimes y$</li><li>实数集合，符号：<code>\mathbb{R}</code>，如：<code>\mathbb{R}</code></li><li>自然数集合，符号：<code>\mathbb{Z}</code>，如：<code>\mathbb{Z}</code></li><li>空集，符号：<code>\emptyset</code>，如：$\emptyset$</li></ol><h2 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h2><ol><li>无穷，符号：<code>\infty</code>，如：$\infty$</li><li>虚数，符号：<code>\imath</code>，如：$\imath$</li><li>虚数，符号：<code>\jmath</code>，如：$\jmath$</li><li>数学符号，符号<code>\hat{a}</code>，如：$\hat{a}$</li><li>数学符号，符号<code>\check{a}</code>，如：$\check{a}$</li><li>数学符号，符号<code>\breve{a}</code>，如：$\breve{a}$</li><li>数学符号，符号<code>\tilde{a}</code>，如：$\tilde{a}$</li><li>数学符号，符号<code>\bar{a}</code>，如：$\bar{a}$</li><li>矢量符号，符号<code>\vec{a}</code>，如：$\vec{a}$</li><li>数学符号，符号<code>\acute{a}</code>，如：$\acute{a}$</li><li>数学符号，符号<code>\grave{a}</code>，如：$\grave{a}$</li><li>数学符号，符号<code>\mathring{a}</code>，如：$\mathring{a}$</li><li>一阶导数符号，符号<code>\dot{a}</code>，如：$\dot{a}$</li><li>二阶导数符号，符号<code>\ddot{a}</code>，如：$\ddot{a}$</li><li>上箭头，符号：<code>\uparrow</code>，如：$\uparrow$</li><li>上箭头，符号：<code>\Uparrow</code>，如：$\Uparrow$</li><li>下箭头，符号：<code>\downarrow</code>，如：$\downarrow$</li><li>下箭头，符号：<code>\Downarrow</code>，如：$\Downarrow$</li><li>左箭头，符号：<code>\leftarrow</code>，如：$\leftarrow$</li><li>左箭头，符号：<code>\Leftarrow</code>，如：$\Leftarrow$</li><li>右箭头，符号：<code>\rightarrow</code>，如：$\rightarrow$</li><li>右箭头，符号：<code>\Rightarrow</code>，如：$\Rightarrow$</li><li>底端对齐的省略号，符号：<code>\ldots</code>，如：$1,2,\ldots,n$</li><li>中线对齐的省略号，符号：<code>\cdots</code>，如：$x_1^2 + x_2^2 + \cdots + x_n^2$</li><li>竖直对齐的省略号，符号：<code>\vdots</code>，如：$\vdots$</li><li>斜对齐的省略号，符号：<code>\ddots</code>，如：$\ddots$</li></ol><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><table><thead><tr><th>字母</th><th>实现</th><th>字母</th><th>实现</th></tr></thead><tbody><tr><td>A</td><td><code>A</code></td><td>α</td><td><code>\alhpa</code></td></tr><tr><td>B</td><td><code>B</code></td><td>β</td><td><code>\beta</code></td></tr><tr><td>Γ</td><td><code>\Gamma</code></td><td>γ</td><td><code>\gamma</code></td></tr><tr><td>Δ</td><td><code>\Delta</code></td><td>δ</td><td><code>\delta</code></td></tr><tr><td>E</td><td><code>E</code></td><td>ϵ</td><td><code>\epsilon</code></td></tr><tr><td>Z</td><td><code>Z</code></td><td>ζ</td><td><code>\zeta</code></td></tr><tr><td>H</td><td><code>H</code></td><td>η</td><td><code>\eta</code></td></tr><tr><td>Θ</td><td><code>\Theta</code></td><td>θ</td><td><code>\theta</code></td></tr><tr><td>I</td><td><code>I</code></td><td>ι</td><td><code>\iota</code></td></tr><tr><td>K</td><td><code>K</code></td><td>κ</td><td><code>\kappa</code></td></tr><tr><td>Λ</td><td><code>\Lambda</code></td><td>λ</td><td><code>\lambda</code></td></tr><tr><td>M</td><td><code>M</code></td><td>μ</td><td><code>\mu</code></td></tr><tr><td>N</td><td><code>N</code></td><td>ν</td><td><code>\nu</code></td></tr><tr><td>Ξ</td><td><code>\Xi</code></td><td>ξ</td><td><code>\xi</code></td></tr><tr><td>O</td><td><code>O</code></td><td>ο</td><td><code>\omicron</code></td></tr><tr><td>Π</td><td><code>\Pi</code></td><td>π</td><td><code>\pi</code></td></tr><tr><td>P</td><td><code>P</code></td><td>ρ</td><td><code>\rho</code></td></tr><tr><td>Σ</td><td><code>\Sigma</code></td><td>σ</td><td><code>\sigma</code></td></tr><tr><td>T</td><td><code>T</code></td><td>τ</td><td><code>\tau</code></td></tr><tr><td>Υ</td><td><code>\Upsilon</code></td><td>υ</td><td><code>\upsilon</code></td></tr><tr><td>Φ</td><td><code>\Phi</code></td><td>ϕ</td><td><code>\phi</code></td></tr><tr><td>X</td><td><code>X</code></td><td>χ</td><td><code>\chi</code></td></tr><tr><td>Ψ</td><td><code>\Psi</code></td><td>ψ</td><td><code>\psi</code></td></tr><tr><td>Ω</td><td><code>\v</code></td><td>ω</td><td><code>\omega</code></td></tr></tbody></table><h2 id="Markdown语法补充"><a href="#Markdown语法补充" class="headerlink" title="Markdown语法补充"></a>Markdown语法补充</h2><p>###一、标题</p><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p><p>示例：</p><pre><code># 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题</code></pre><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr><h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul><li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5></li></ul><p>要加粗的文字左右分别用两个*号包起来</p><ul><li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5></li></ul><p>要倾斜的文字左右分别用一个*号包起来</p><ul><li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5></li></ul><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><ul><li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5></li></ul><p>要加删除线的文字左右分别用两个~~号包起来</p><p>示例：</p><pre><code>**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~</code></pre><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong>这是斜体加粗的文字</strong><br><del>这是加删除线的文字</del></p><hr><h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用</p><p>示例：</p><pre><code>&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</code></pre><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>三个或者三个以上的 - 或者 * 都可以。</p><p>示例：</p><pre><code>-------********</code></pre><p>效果如下：<br>可以看到，显示效果是一样的。</p><hr><hr><hr><hr><h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：</p><pre><code>![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p>示例：</p><pre><code>![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;)</code></pre><p>效果如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/6860761-fd2f51090a890873.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/550/format/webp" alt="img"></p><p>blockchain</p><p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p><h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：</p><pre><code>[超链接名](超链接地址 &quot;超链接title&quot;)title可加可不加</code></pre><p>示例：</p><pre><code>[简书](http://jianshu.com)[百度](http://baidu.com)</code></pre><p>效果如下：</p><p><a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank" rel="noopener">简书</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p><pre><code>&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;示例&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt;</code></pre><hr><h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><ul><li><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5></li></ul><p>语法：<br>无序列表用 - + * 任何一种都可以</p><pre><code>- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格</code></pre><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5></li></ul><p>语法：<br>数字加点</p><pre><code>1.列表内容2.列表内容3.列表内容注意：序号跟内容之间要有空格</code></pre><p>效果如下：</p><p>1.列表内容<br>2.列表内容<br>3.列表内容</p><ul><li><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5></li></ul><p><strong>上一级和下一级之间敲三个空格即可</strong></p><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级无序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><ol><li>一级有序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li>一级有序列表内容<ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ol><hr><h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><p>语法：</p><pre><code>表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略</code></pre><p>示例：</p><pre><code>姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟</code></pre><p>效果如下：</p><table><thead><tr><th>姓名</th><th>技能</th><th>排行</th></tr></thead><tbody><tr><td>刘备</td><td>哭</td><td>大哥</td></tr><tr><td>关羽</td><td>打</td><td>二哥</td></tr><tr><td>张飞</td><td>骂</td><td>三弟</td></tr></tbody></table><h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：<br>单行代码：代码之间分别用一个反引号包起来</p><pre><code>    `代码内容`</code></pre><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><pre><code>(```)  代码...  代码...  代码...(```)</code></pre><blockquote><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p></blockquote><p>示例：</p><p>单行代码</p><pre><code>`create database hero;`</code></pre><p>代码块</p><pre><code>(```)    function fun(){         echo &quot;这是一句非常牛逼的代码&quot;;    }    fun();(```)</code></pre><p>效果如下：</p><p>单行代码</p><p><code>create database hero;</code></p><p>代码块</p><pre><code>function fun(){  echo &quot;这是一句非常牛逼的代码&quot;;}fun();</code></pre><h1 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h1><pre><code>​```flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;</code></pre><p><code>`</code></p><p>效果如下：<br>简书不支持流程图，所以截了个图</p><p><img src="http://upload-images.jianshu.io/upload_images/6860761-9d9524ba31047696.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/751/format/webp" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> LaTex </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于平面刚体自由度的计算</title>
      <link href="/2018/12/22/guan-yu-ping-mian-gang-ti-zi-you-du-de-ji-suan/"/>
      <url>/2018/12/22/guan-yu-ping-mian-gang-ti-zi-you-du-de-ji-suan/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/7.jpg?raw=true" alt="zhang不大的先生"></p><h1 id="刚体自由度判断问题"><a href="#刚体自由度判断问题" class="headerlink" title="刚体自由度判断问题"></a>刚体自由度判断问题</h1><p>理论力学复习过程中遇到一个刚体自由度的判断问题，查了一下资料，这里分享一下自由度的计算问题</p><p>机构自由度的计算公式是</p><p>$$F=3n-2p_l-p_k$$</p><p>公式本身简单，只需要数出活动构件的数目n，低副的数目pl，高副的数目ph,则自由度就很容易计算了。</p><p>使用该公式有一个前提，就是要先判断出一些特殊情况：复合铰链，局部自由度和虚约束，在把这些情况都弄清楚后，再用上述公式计算，才可以得到正确的结果。</p><ol><li><p>下面举一个例子，说明机构自由度的计算方法。计算图示机构的自由度，并判断该机构是否具有确定运动。如有复合铰链、局部自由度、虚约束，请直接在题图中标出。</p><p><img src="http://s9.sinaimg.cn/middle/9e19c10b4c27e7b2bb238&amp;690" alt="mcc"></p></li></ol><ul><li>拿到该机构以后，第一步就是找到凸轮M，发现推杆DB尖端有一个滚子，此滚子就是局部自由度。局部自由度几乎永远出现在滚子推杆的凸轮机构中。对于该局部自由度，处理方法是把该滚子B与BD杆焊接在一起，成为一个整体。</li><li>接着考察虚约束。虚约束中最常见的就是某一个构件和机架之间有导路重合或者平行的移动副。这里FH构件就在F,G,H三个地方有三个移动副与机架相联，而这三个移动副导路重合。此时只有一个起作用，其它的就是虚约束。对于虚约束，只保留其中一个，其它的全部拿掉。</li><li>最后考虑复合铰链。复合铰链出现在转动副的地方，如果在转动副处有2个以上的构件相联，则该铰链就是复合铰链。从上图可以看出，J点有三个构件IJ,KJ,JL相连，所以J是复合铰链。对于复合铰链，在计算转动副的数目时，在此处留心即可，注意这里的转动副数目等于相连的构件数目减1.</li></ul><p>综上所述，把局部自由度，虚约束，复合铰链表示出来的结果见下图</p><p> <img src="http://s15.sinaimg.cn/middle/9e19c10b4c27e7c4911fe&amp;690" alt="mcc"></p><p>这样，把滚子B和BD焊接在一起，从而去掉局部自由度；而去掉G，H这两个虚约束；J点有两个转动副。下面进入公式的计算。</p><ul><li><p>活动构件：齿轮A，齿轮M，连杆IJ,连杆KJ，连杆JL，滑块L，连杆BD(焊接了滚子B)，连杆DE，连杆FH。共计9个。</p></li><li><p>低副：A, M, I, K, J(2)，L(2), C, D, E, F. 共计12个.{注意，这里L处一个转动副，1个移动副，不能算成复合铰链，所谓铰链是指转动副，复合意味着着多个转动副}</p></li><li><p>高副：齿轮A和齿轮B之间1个，B和凸轮之间1个，共计2个。</p><p>则由于该机构有一个原动件，原动件的数目 = 自由度的数目，所以该机构有确定的运动。</p></li></ul><ol><li>下面再看一个例子。</li></ol><p><img src="http://s7.sinaimg.cn/middle/9e19c10b4c27e88feb8a6&amp;690" alt="mcc"></p><ul><li><p>同样，先判断局部自由度。它总是出现自凸轮机构处，如果从动件有滚子，那么滚子就是局部自由度。所以这里B处是局部自由度。</p></li><li><p>接着判断虚约束。同样先看导路重合的移动副。这里H, I 处时杆件HJ与机架之间的两个移动副，其中一个是虚约束。</p></li><li><p>除此以外，关注在凸轮边上的一个式子，这个式子给出了与铰链K连接的几条线段的几何关系。机构运动简图本来只应该有图形的，如果出现了一些异常的等式，一定要高度警惕，这几乎就意味着一种特殊虚约束的出现。从这个等式可以发现，即便没有LK，滑块M的运动不会改变。所以，连杆LK以及转动副L和K都是虚约束，要拿掉。</p></li><li><p>最后关注复合铰链。它总是出现在杆件云集的转动副处。从图中可以看出，铰链E点连接3根杆件，所以它是复合铰链。</p></li><li><p>综上所述，标识局部自由度，复合铰链，虚约束后的机构运动简图如下。</p><p><img src="http://s11.sinaimg.cn/middle/9e19c10b4c27e8ce1c77a&amp;690" alt="mcc"></p></li></ul><p>这样，把滚子B和BD焊接在一起，从而处理了局部自由度；去掉移动副H，去掉LK及铰链L和铰链K，从而消除虚约束；至于E点，注意计算的时候是2个转动副。</p><p>下面开始使用公式计算自由度。</p><p>活动构件：凸轮A，连杆BD（焊接了滚子B）,连杆EC, 连杆EF，连杆EG，连杆HJ，连杆JM，滑块M。共计8个。</p><p>低副：A,C,D,E(2),F,G,I,J,M(2).共计算11个。</p><p>高副：滚子B与凸轮A之间1个。</p><p>则</p><p>$$n=8$$</p><p>$$p_l=11$$</p><p>$$p_h=1$$</p><p>$$F=3n-2p_l-p_h=3\times8-2\times11-1=1$$ </p><ol><li>再看最后一个例子。</li></ol><p><img src="http://s5.sinaimg.cn/middle/9e19c10b4c27e926d0974&amp;690" alt="mcc"></p><p>显然，B处—局部自由度；G,H中有一个是虚约束，而D处是复合铰链。标志如下图。把滚子B和BC杆焊接在一起，则此处BD和BC是一个铰链连接，有一个转动副；去掉H处的移动副以消除虚约束；D点有2个转动副。</p><ul><li>活动构件：凸轮A  连杆CB  连杆BD   连杆DE  连杆 DF  连杆GH  。共计6个。</li><li>低副： A  C  B  D(2)  E  F  G  共计8个。</li><li><p>高副： 凸轮A和滚子B之间1个。</p><p> 则</p></li></ul><p>$$n=6$$</p><p>$$p_l=8$$</p><p>$$p_h=1$$</p><p>$$F=3n-2p_l-p_h=3\times6-2\times8-1=1$$ </p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>感觉理论力学还有很多要补的，希望接下来自己能多注意一下吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 理论力学 </tag>
            
            <tag> 自由度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于一些小事的想法</title>
      <link href="/2018/12/21/guan-yu-yi-xie-xiao-shi-de-xiang-fa/"/>
      <url>/2018/12/21/guan-yu-yi-xie-xiao-shi-de-xiang-fa/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/5.jpg?raw=true" alt="mcc"></p><h1 id="奇奇怪怪的两天"><a href="#奇奇怪怪的两天" class="headerlink" title="奇奇怪怪的两天"></a>奇奇怪怪的两天</h1><p>这两天确实很忙，先是帮忙做一个背景视频，虽然最后还是没有帮上忙，但自己在折腾过程中还是学到了很多，再就是各种”奔波“，物理实验，分数复查，实验室任务，种子班的各种调查再加上自己的各种专业课，基本上停下了自己所有的业余爱好了，感觉压力有点大，但同时也感觉很充实，希望自己能想自己身边的人一样，宽于待人，严于律己，成为一个靠谱的伙伴，也希望自己变得更加专注，许多事你可以做好，也有机会努力一下，简单直接一点，也是可以抓住的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zhang不大的先生</title>
      <link href="/2018/12/20/zhang-bu-da-de-xian-sheng/"/>
      <url>/2018/12/20/zhang-bu-da-de-xian-sheng/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/2.jpg?raw=true" alt="zhang不大的先生"></p><h1 id="zhang不大的先生"><a href="#zhang不大的先生" class="headerlink" title="zhang不大的先生"></a>zhang不大的先生</h1><p>这个名字是由一个学长的网名改编的，挺符合自己的，第一次使用hexo写博客，感觉还不错，希望自己能坚持下去。</p><video id="video" controls preload="none" width="100%"><br>      <source id="mp4" src="https://mcc3210.oss-ap-southeast-3.aliyuncs.com/film/Sintel%20-%20Full%20.MKV" type="video/mkv"><br>      <p>Your user agent does not support the HTML5 Video element.</p><br></video>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原则没有例外 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mcc</title>
      <link href="/2018/12/20/mcc/"/>
      <url>/2018/12/20/mcc/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/mcc321/mcc/blob/master/img/1.jpg?raw=true" alt="mcc" title="mcc"></p><h1 id="mcc"><a href="#mcc" class="headerlink" title="mcc"></a>mcc</h1><p>希望许多事都越变越好，希望在接下来的时间里自己更加努力吧。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自我介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
